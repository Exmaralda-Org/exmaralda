/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ApplicationFrame.java
 *
 * Created on 26.11.2012, 15:12:49
 */
package org.exmaralda.aligner.application;

import java.awt.event.ActionEvent;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableColumnModel;
import org.exmaralda.aligner.actions.OpenAction;
import org.exmaralda.aligner.actions.OpenBBAWAction;
import org.exmaralda.aligner.actions.SaveAction;
import org.exmaralda.common.ExmaraldaApplication;
import org.exmaralda.exakt.utilities.FileIO;
import org.exmaralda.folker.listview.TimepointTableCellRenderer;
import org.exmaralda.folker.timeview.AbstractTimeProportionalViewer;
import org.exmaralda.folker.timeview.TimeSelectionEvent;
import org.exmaralda.folker.timeview.TimeSelectionListener;
import org.exmaralda.folker.timeview.WaveFormViewer;
import org.exmaralda.orthonormal.data.NormalizedFolkerTranscription;
import org.exmaralda.partitureditor.jexmaraldaswing.fileFilters.ParameterFileFilter;
import org.exmaralda.partitureditor.sound.BASAudioPlayer;
import org.exmaralda.partitureditor.sound.Playable;
import org.exmaralda.partitureditor.sound.PlayableEvent;
import org.exmaralda.partitureditor.sound.PlayableListener;
import org.jdom.Document;
import org.jdom.JDOMException;

/**
 *
 * @author Schmidt
 */
public class ApplicationFrame extends javax.swing.JFrame implements TimeSelectionListener, 
                                                                    PlayableListener,
                                                                    AdjustmentListener,
                                                                    ListSelectionListener,
                                                                    ExmaraldaApplication {

    public AbstractTimeProportionalViewer timeViewer;
    public Playable player;
    public NormalizedFolkerTranscription transcription;
    public TranscriptionTableModel transcriptionTableModel;
    

    /** Creates new form ApplicationFrame */
    public ApplicationFrame() {
        //org.exmaralda.common.Logger.initialiseLogger(this);

        initComponents();

        timeViewer = new org.exmaralda.folker.timeview.WaveFormViewer();
        timeViewer.addTimeSelectionListener(this);

        player = new BASAudioPlayer();
        if (player!=null){
            player.addPlayableListener(timeViewer);
            player.addPlayableListener(this);
        }
        
        timeViewScrollPane.setViewportView(timeViewer);  
        timeViewScrollPane.getHorizontalScrollBar().addAdjustmentListener(this);
        
        transcriptionTable.getSelectionModel().addListSelectionListener(this);
        
        formatTable();
        
        AbstractAction mainAction = new AbstractAction(){

            @Override
            public void actionPerformed(ActionEvent e) {
                double time = player.getCurrentPosition();
                int selectedRow = transcriptionTable.getSelectedRow();
                if (selectedRow>=transcriptionTableModel.getRowCount()-1) return;
                transcriptionTableModel.setTime(selectedRow, 1, time);
                transcriptionTableModel.setTime(selectedRow+1, 0, time);
                transcriptionTable.getSelectionModel().setSelectionInterval(selectedRow+1, selectedRow+1);
                transcriptionTable.scrollRectToVisible(transcriptionTable.getCellRect(selectedRow+1, 0, true));
            }
            
        };
        mainPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(' '), "mainAction");
        mainPanel.getActionMap().put("mainAction", mainAction);
        
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        mainPanel = new javax.swing.JPanel();
        transcriptionTableScrollPane = new javax.swing.JScrollPane();
        transcriptionTable = new javax.swing.JTable();
        textPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        startButton = new javax.swing.JButton();
        topPanel = new javax.swing.JPanel();
        timeViewScrollPane = new javax.swing.JScrollPane();
        buttonPanel = new javax.swing.JPanel();
        playButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        firstSecondButton = new javax.swing.JButton();
        playSelectionButton = new javax.swing.JButton();
        lastSecondButton = new javax.swing.JButton();
        assignTimesButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        openBBAWMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quick Aligner");

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setPreferredSize(new java.awt.Dimension(1000, 800));

        mainPanel.setLayout(new java.awt.BorderLayout());

        transcriptionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        transcriptionTableScrollPane.setViewportView(transcriptionTable);

        mainPanel.add(transcriptionTableScrollPane, java.awt.BorderLayout.CENTER);

        textPanel.setLayout(new java.awt.BorderLayout());

        textArea.setBackground(new java.awt.Color(51, 51, 51));
        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
        textArea.setForeground(new java.awt.Color(255, 255, 0));
        textArea.setLineWrap(true);
        textArea.setRows(10);
        textArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(textArea);

        textPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        startButton.setText("START!");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        textPanel.add(startButton, java.awt.BorderLayout.WEST);

        mainPanel.add(textPanel, java.awt.BorderLayout.NORTH);

        jSplitPane1.setBottomComponent(mainPanel);

        topPanel.setLayout(new java.awt.BorderLayout());
        topPanel.add(timeViewScrollPane, java.awt.BorderLayout.CENTER);

        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/22x22/actions/media-playback-start.png"))); // NOI18N
        playButton.setText("Play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(playButton);

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/22x22/actions/media-playback-stop.png"))); // NOI18N
        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(stopButton);

        firstSecondButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/22x22/actions/media-playback-start.png"))); // NOI18N
        firstSecondButton.setText("[*");
        firstSecondButton.setToolTipText("First second of selection");
        firstSecondButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstSecondButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(firstSecondButton);

        playSelectionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/22x22/actions/media-playback-start.png"))); // NOI18N
        playSelectionButton.setText("[*]");
        playSelectionButton.setToolTipText("Selection");
        playSelectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playSelectionButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(playSelectionButton);

        lastSecondButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/22x22/actions/media-playback-start.png"))); // NOI18N
        lastSecondButton.setText("*]");
        lastSecondButton.setToolTipText("Last second of selection");
        lastSecondButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastSecondButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(lastSecondButton);

        assignTimesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/22x22/actions/appointment-new.png"))); // NOI18N
        assignTimesButton.setText("Assign times");
        assignTimesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignTimesButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(assignTimesButton);

        topPanel.add(buttonPanel, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setLeftComponent(topPanel);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        openMenuItem.setAction(new OpenAction(this, "Open", null));
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        openBBAWMenuItem.setAction(new OpenBBAWAction(this, "Open BBAW-TEI...", null));
        openBBAWMenuItem.setText("Open BBAW-TEI...");
        fileMenu.add(openBBAWMenuItem);

        saveMenuItem.setAction(new SaveAction(this, "Save", null));
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        transcriptionTableModel.removeTimes();        
        transcriptionTableModel.setTime(0, 0, 0.0);        
        transcriptionTableModel.setTime(transcriptionTableModel.getRowCount()-1, 1, player.getTotalLength());        
        player.setStartTime(0.0);
        player.setEndTime(player.getTotalLength());
        transcriptionTable.getSelectionModel().setSelectionInterval(0, 0);
        mainPanel.requestFocus();
        player.startPlayback();
    }//GEN-LAST:event_startButtonActionPerformed

    private void playSelectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playSelectionButtonActionPerformed
        double start = timeViewer.getSelectionStartTime();
        double end = timeViewer.getSelectionEndTime();
        if (start>=0 && end>=0){
            player.setStartTime(start/1000.0);
            player.setEndTime(end/1000.0);            
        }
        player.startPlayback();
    }//GEN-LAST:event_playSelectionButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        player.stopPlayback();
    }//GEN-LAST:event_stopButtonActionPerformed

    private void assignTimesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignTimesButtonActionPerformed
        int selectedRow = transcriptionTable.getSelectedRow();
        if (selectedRow<0) return;
        double start = timeViewer.getSelectionStartTime();
        double end = timeViewer.getSelectionEndTime();
        if (start<0 || end <0 || start==end) return;
        transcriptionTableModel.setTime(selectedRow, 0, start/1000.0);
        transcriptionTableModel.setTime(selectedRow, 1, end/1000.0);
    }//GEN-LAST:event_assignTimesButtonActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        double start = timeViewer.getCursorTime();
        player.setStartTime(start/1000.0);
        player.setEndTime(player.getTotalLength());
        player.startPlayback();
    }//GEN-LAST:event_playButtonActionPerformed

    private void lastSecondButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastSecondButtonActionPerformed
        double startTime = Math.max(0.0, timeViewer.getSelectionEndTime()-1000.0);
        player.setStartTime(startTime/1000.0);
        player.setEndTime(timeViewer.getSelectionEndTime()/1000.0);
        player.startPlayback();
    }//GEN-LAST:event_lastSecondButtonActionPerformed

    private void firstSecondButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstSecondButtonActionPerformed
        player.setStartTime(timeViewer.getSelectionStartTime()/1000.0);
        double endTime = Math.min(timeViewer.getSelectionStartTime()+1000.0, player.getTotalLength()*1000.0);
        player.setEndTime(endTime/1000.0);
        player.startPlayback();
    }//GEN-LAST:event_firstSecondButtonActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_openMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try{
            System.out.println("Setting system L&F : " + javax.swing.UIManager.getSystemLookAndFeelClassName());
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
                e.printStackTrace();        
        }
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ApplicationFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignTimesButton;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton firstSecondButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton lastSecondButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openBBAWMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JButton playButton;
    private javax.swing.JButton playSelectionButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JTextArea textArea;
    private javax.swing.JPanel textPanel;
    private javax.swing.JScrollPane timeViewScrollPane;
    private javax.swing.JPanel topPanel;
    private javax.swing.JTable transcriptionTable;
    private javax.swing.JScrollPane transcriptionTableScrollPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void processTimeSelectionEvent(TimeSelectionEvent event) {
        
    }

    @Override
    public void processPlayableEvent(PlayableEvent e) {
        
    }

    @Override
    public void adjustmentValueChanged(AdjustmentEvent e) {
        
    }

    File currentFile;
    
    public void saveTranscriptionFile() {
        try {
            Document d = transcriptionTableModel.getNewDocument();            
            FileIO.writeDocumentToLocalFile(currentFile, d);
        } catch (IOException ex) {
            Logger.getLogger(ApplicationFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void openBBAWTranscriptionFile(File f){
        try {
            currentFile = f;
            Document doc = FileIO.readDocumentFromLocalFile(f);
            setTranscription(doc);
            JFileChooser jfc = new JFileChooser();
            jfc.setFileFilter(new ParameterFileFilter("WAV", "WAV files"));
            jfc.setDialogTitle("Bitte Audiodatei auswählen");
            jfc.setCurrentDirectory(new File("Y:\\media\\audio\\BW"));
            jfc.showOpenDialog(this);
            try {
                setMedia(jfc.getSelectedFile().getAbsolutePath());
                //nft.setMediaPath(mediaPath);
            } catch (IOException ex1) {
                Logger.getLogger(ApplicationFrame.class.getName()).log(Level.SEVERE, null, ex1);
                displayException(ex1);
                return;
            }
        } catch (JDOMException ex) {
            Logger.getLogger(ApplicationFrame.class.getName()).log(Level.SEVERE, null, ex);
            displayException(ex);
            return;
        } catch (IOException ex) {
            Logger.getLogger(ApplicationFrame.class.getName()).log(Level.SEVERE, null, ex);
            displayException(ex);
            return;
        }
    }
    
    public void openTranscriptionFile(File f) {
        currentFile = f;
        String mediaPath;
        NormalizedFolkerTranscription nft;
        try {
            nft = org.exmaralda.orthonormal.io.XMLReaderWriter.readFolkerTranscription(f);
        } catch (JDOMException ex) {
            ex.printStackTrace();    
            displayException(ex);
            return;
        } catch (IOException ex) {
            ex.printStackTrace();    
            displayException(ex);
            return;
        } 
        

        mediaPath = nft.getMediaPath();            

        boolean mediaSet = false;
        while (!mediaSet){
            try {
                setMedia(mediaPath);
                mediaSet = true;
            } catch (IOException ex) {
                ex.printStackTrace();
                JFileChooser jfc = new JFileChooser();
                jfc.setFileFilter(new ParameterFileFilter("WAV", "WAV files"));
                jfc.setDialogTitle("Bitte Audiodatei auswählen");
                jfc.showOpenDialog(this);
                try {
                    setMedia(jfc.getSelectedFile().getAbsolutePath());
                    mediaSet=true;
                    //nft.setMediaPath(mediaPath);
                } catch (IOException ex1) {
                    Logger.getLogger(ApplicationFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
        
        setTranscription(nft);
        
    }
    
    public void setMedia(String path) throws IOException{
        //timeViewer.setPixelsPerSecond(10.0);
        System.out.println("Trying to set " + path);
        String modifiedPath = path;
        // file:/Y:/media/audio/DS/DS--_E_00012_SE_01_A_01_DF_01.WAV
        if (path.startsWith("file:/")){
            modifiedPath = path.substring(6);
        }
        player.setSoundFile(modifiedPath);            
        ((WaveFormViewer)timeViewer).setSoundFile(modifiedPath);
        timeViewer.setPixelsPerSecond(140);
        //timeViewer.setPixelsPerSecond(10.0);
        timeViewScrollPane.revalidate();

    }
    

    public void displayException(Exception e){
        String title = "Fehler";
        String message = e.getLocalizedMessage();
        JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }

    private void setTranscription(NormalizedFolkerTranscription nft) {
        transcription = nft;
        transcriptionTableModel = new TranscriptionTableModel(nft);
        transcriptionTable.setModel(transcriptionTableModel);
        formatTable();
    }
    
    private void setTranscription(Document doc){
        transcriptionTableModel = new TranscriptionTableModel(doc);
        transcriptionTable.setModel(transcriptionTableModel);
        formatTable();        
    }

    private void formatTable() {
        transcriptionTable.setGridColor(new java.awt.Color(102, 204, 255));
        transcriptionTable.setIntercellSpacing(new java.awt.Dimension(0, 0));
        transcriptionTable.setShowHorizontalLines(false);        
        transcriptionTable.setRowHeight(22);
        transcriptionTable.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        
        TableColumnModel cmodel = transcriptionTable.getColumnModel();
        TimepointTableCellRenderer timeCellRenderer = new TimepointTableCellRenderer();
        cmodel.getColumn(0).setCellRenderer(timeCellRenderer);
        cmodel.getColumn(0).setPreferredWidth(150);
        cmodel.getColumn(0).setMaxWidth(150);
        cmodel.getColumn(1).setCellRenderer(timeCellRenderer);
        cmodel.getColumn(1).setPreferredWidth(150);
        cmodel.getColumn(1).setMaxWidth(150);
        cmodel.getColumn(2).setPreferredWidth(100);
        cmodel.getColumn(2).setMaxWidth(100);
        cmodel.getColumn(3).setPreferredWidth(800);
        
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        int selectedRow = transcriptionTable.getSelectedRow();
        if (selectedRow>=0){
            textArea.setText((String)(transcriptionTableModel.getValueAt(selectedRow, 3)));
            
            Double start = transcriptionTableModel.getTime(selectedRow,0);
            Double end = transcriptionTableModel.getTime(selectedRow,1);
            if (start!=null && end!=null){
                timeViewer.setSelectionInterval(start*1000.0, end*1000.0, false, true);
                timeViewer.resetDragBoundaries();
            } else {
                System.out.println("sumpin's null");
            }
        }
    }

    @Override
    public String getVersion() {
        return "0.2";
    }

    @Override
    public String getApplicationName() {
        return "QuickAligner";
    }

    @Override
    public String getPreferencesNode() {
        return "org.exmaralda.aligner";
    }

    @Override
    public ImageIcon getWelcomeScreen() {
        return new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/orthonormal/gui/splashscreen.png"));
    }
    
    @Override
    public void resetSettings(){
        try {
            java.util.prefs.Preferences.userRoot().node(getPreferencesNode()).clear();                
            JOptionPane.showMessageDialog(rootPane, "Preferences reset.\nRestart the editor.");
        } catch (BackingStoreException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, "Problem resetting preferences:\n" + ex.getLocalizedMessage());
        }        
    }
    


}
