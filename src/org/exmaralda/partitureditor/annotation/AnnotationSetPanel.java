/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AnnotationSetPanel.java
 *
 * Created on 14.10.2009, 17:33:51
 */

package org.exmaralda.partitureditor.annotation;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Enumeration;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author thomas
 */
public class AnnotationSetPanel extends javax.swing.JPanel implements MouseListener, TreeSelectionListener {

    AnnotationDialog annotationDialog = null;

    /** Creates new form AnnotationSetPanel
     * @param c */
    public AnnotationSetPanel(Category c) {
        initComponents();
        AnnotationSetTreeModel astm = new AnnotationSetTreeModel(c, false);
        categoryTree.setModel(astm);
        categoryTree.setCellRenderer(new CategoryTreeCellRenderer());
        categoryTree.getSelectionModel().addTreeSelectionListener(this);
        categoryTree.addMouseListener(this);
        expandAll(categoryTree,true);
        //categoryTree.expandRow(0);
    }

    public void setAnnotationDialog(AnnotationDialog annotationDialog) {
        this.annotationDialog = annotationDialog;
    }

    public void showNode(Category c){
        System.out.println("Trying " + c.getName() + " / " + c.dependson);
        expandAll(categoryTree, false);
        //categoryTree.expandPath(new TreePath(tp));
        categoryTree.expandPath(new TreePath(c.getPath()));
        for (int i=0; i<c.getChildCount(); i++){
            categoryTree.expandPath(new TreePath(c.getChildAt(i)));
        }
        /*for (TreeNode tn : c.getPath()){
            categoryTree.expandPath(new TreePath(tn));
        }*/
        categoryTree.getSelectionModel().setSelectionPath(new TreePath(c.getPath()));
        //expandAll(categoryTree, new TreePath(c), true);
    }

    // If expand is true, expands all nodes in the tree.
    // Otherwise, collapses all nodes in the tree.
    public void expandAll(JTree tree, boolean expand) {
        TreeNode root = (TreeNode)tree.getModel().getRoot();

        // Traverse tree from root
        expandAll(tree, new TreePath(root), expand);
    }
    private void expandAll(JTree tree, TreePath parent, boolean expand) {
        // Traverse children
        TreeNode node = (TreeNode)parent.getLastPathComponent();
        if (node.getChildCount() >= 0) {
            for (Enumeration e=node.children(); e.hasMoreElements(); ) {
                TreeNode n = (TreeNode)e.nextElement();
                TreePath path = parent.pathByAddingChild(n);
                expandAll(tree, path, expand);
            }
        }

        // Expansion or collapse must be done bottom-up
        if (expand) {
            tree.expandPath(parent);
        } else {
            tree.collapsePath(parent);
        }
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        categoryTree = new javax.swing.JTree();

        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(categoryTree);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree categoryTree;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables


    @Override
    public void mouseClicked(MouseEvent e) {
        if (annotationDialog==null) return;
        if (e.getClickCount()==2){
            Category c = (Category)categoryTree.getLastSelectedPathComponent();
            if (c==null) return;
            if (c.getTag()!=null){
                annotationDialog.processTag(c.getTag());
            }
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void valueChanged(TreeSelectionEvent e) {
        if (annotationDialog==null) return;
        Category c = (Category)categoryTree.getLastSelectedPathComponent();
        if (c==null) return;
        annotationDialog.processDescription(c.getDescription());
    }

}
