/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package org.exmaralda.partitureditor.jexmaraldaswing.fileDialogs;

import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author bernd
 */
public class WhisperImportPostProcessDialog extends javax.swing.JDialog {

    /**
     * Creates new form WhisperImportPostProcessDialog
     */
    public WhisperImportPostProcessDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        getRootPane().setDefaultButton(okButton);
    }
    
    public Map<String, Boolean> getParameters(){
        Map<String, Boolean> result = new HashMap<>();
        
        result.put("w", wordTiersCheckbox.isSelected());
        result.put("v", textTiersCheckbox.isSelected());
        result.put("temp", temperatureTiersCheckbox.isSelected());
        result.put("avg", avgLogprobTiersCheckbox.isSelected());
        result.put("cr", compressionRatioTiersCheckbox.isSelected());
        result.put("nsp", noSpechProbTiersCheckbox.isSelected());
        
        result.put("EMPTY", emptyTiersCheckbox.isSelected());
        
        return result;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        selectionsPanel = new javax.swing.JPanel();
        tiersPanel = new javax.swing.JPanel();
        textTiersCheckbox = new javax.swing.JCheckBox();
        wordTiersCheckbox = new javax.swing.JCheckBox();
        temperatureTiersCheckbox = new javax.swing.JCheckBox();
        avgLogprobTiersCheckbox = new javax.swing.JCheckBox();
        compressionRatioTiersCheckbox = new javax.swing.JCheckBox();
        noSpechProbTiersCheckbox = new javax.swing.JCheckBox();
        emptyTiersPanel = new javax.swing.JPanel();
        emptyTiersCheckbox = new javax.swing.JCheckBox();
        okPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Whisper import");

        mainPanel.setLayout(new java.awt.BorderLayout());

        selectionsPanel.setLayout(new java.awt.BorderLayout());

        tiersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Tiers to import"));
        tiersPanel.setLayout(new java.awt.GridLayout(3, 2));

        textTiersCheckbox.setSelected(true);
        textTiersCheckbox.setText("Text tier(s)");
        tiersPanel.add(textTiersCheckbox);

        wordTiersCheckbox.setSelected(true);
        wordTiersCheckbox.setText("Word tier(s)");
        wordTiersCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordTiersCheckboxActionPerformed(evt);
            }
        });
        tiersPanel.add(wordTiersCheckbox);

        temperatureTiersCheckbox.setText("Temperature tier(s)");
        tiersPanel.add(temperatureTiersCheckbox);

        avgLogprobTiersCheckbox.setText("Average log probability tier(s)");
        tiersPanel.add(avgLogprobTiersCheckbox);

        compressionRatioTiersCheckbox.setText("Compression ratio tier(s)");
        compressionRatioTiersCheckbox.setToolTipText("");
        tiersPanel.add(compressionRatioTiersCheckbox);

        noSpechProbTiersCheckbox.setText("No speech probability tier(s)");
        noSpechProbTiersCheckbox.setToolTipText("");
        tiersPanel.add(noSpechProbTiersCheckbox);

        selectionsPanel.add(tiersPanel, java.awt.BorderLayout.CENTER);

        emptyTiersCheckbox.setText("Empty tier(s)");
        emptyTiersPanel.add(emptyTiersCheckbox);

        selectionsPanel.add(emptyTiersPanel, java.awt.BorderLayout.SOUTH);

        mainPanel.add(selectionsPanel, java.awt.BorderLayout.CENTER);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout okPanelLayout = new javax.swing.GroupLayout(okPanel);
        okPanel.setLayout(okPanelLayout);
        okPanelLayout.setHorizontalGroup(
            okPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 368, Short.MAX_VALUE)
            .addGroup(okPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(okPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(okButton)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        okPanelLayout.setVerticalGroup(
            okPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
            .addGroup(okPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(okPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(okButton)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        mainPanel.add(okPanel, java.awt.BorderLayout.SOUTH);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void wordTiersCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordTiersCheckboxActionPerformed
        // cannot not import both text and word tiers
        if (!wordTiersCheckbox.isSelected()){
            textTiersCheckbox.setSelected(true);
        }
    }//GEN-LAST:event_wordTiersCheckboxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WhisperImportPostProcessDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WhisperImportPostProcessDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WhisperImportPostProcessDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WhisperImportPostProcessDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                WhisperImportPostProcessDialog dialog = new WhisperImportPostProcessDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox avgLogprobTiersCheckbox;
    private javax.swing.JCheckBox compressionRatioTiersCheckbox;
    private javax.swing.JCheckBox emptyTiersCheckbox;
    private javax.swing.JPanel emptyTiersPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JCheckBox noSpechProbTiersCheckbox;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel okPanel;
    private javax.swing.JPanel selectionsPanel;
    private javax.swing.JCheckBox temperatureTiersCheckbox;
    private javax.swing.JCheckBox textTiersCheckbox;
    private javax.swing.JPanel tiersPanel;
    private javax.swing.JCheckBox wordTiersCheckbox;
    // End of variables declaration//GEN-END:variables
}
