/*
 * FindDialog.java
 *
 * Created on 13. Juni 2003, 12:15
 */

package org.exmaralda.partitureditor.search;

import java.awt.Toolkit;
import javax.swing.JOptionPane;
import org.exmaralda.partitureditor.unicodeKeyboard.*;
import org.exmaralda.partitureditor.jexmaralda.*;
import java.util.*;
import org.exmaralda.partitureditor.jexmaraldaswing.*;
import java.awt.event.*;
import javax.swing.JComponent;
import javax.swing.KeyStroke;

/**
 *
 * @author  thomas
 */
public class FindDialog extends javax.swing.JDialog /*implements java.awt.event.FocusListener*/ {
    
    UnicodeKeyboardPanel keyboardPanel;
    UnicodeTextField searchStringTextField;
    BasicTranscription transcription;
    Vector resultVector = new Vector();
    javax.swing.event.EventListenerList listenerList = new javax.swing.event.EventListenerList();
    String[] searchArea;
    boolean firstFocusLossAvoided = false;
    ActionListener actionListener;
    ActionListener actionListener2;

    
    /** Creates new form FindDialog
     * @param parent
     * @param modal
     * @param externalKeyboardPaths
     * @param generalPurposeFontName */
    public FindDialog(java.awt.Frame parent, boolean modal, String[] externalKeyboardPaths, String generalPurposeFontName) {
        super(parent, modal);
        //addFocusListener(this);
        System.out.println("Initializing search dialog");
        initComponents();
        keyboardPanel = new UnicodeKeyboardPanel(externalKeyboardPaths, generalPurposeFontName);
        resultList.setCellRenderer(new SearchResultListCellRenderer());
        //getContentPane().add(keyboardPanel, java.awt.BorderLayout.WEST);
        keyboardPanelPanel.add(keyboardPanel);
        keyboardPanelPanel.setVisible(false);
        searchStringTextField = new UnicodeTextField();
        searchStringTextField.setPreferredSize(new java.awt.Dimension(200,26));
        
        // actionListener for the  search expression textfield
        actionListener = new ActionListener() {     
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                 searchButtonActionPerformed(actionEvent);                 
            }
        };
        searchStringTextField.addActionListener(actionListener);


        actionListener2 = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                gotoNextSearchResult();
            }
        };
        KeyStroke stroke =  KeyStroke.getKeyStroke(KeyEvent.VK_W, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
        getRootPane().registerKeyboardAction(actionListener2, stroke, JComponent.WHEN_IN_FOCUSED_WINDOW);

        
        searchStringPanel.add(searchStringTextField);
        keyboardPanel.addListener(searchStringTextField);
        org.exmaralda.common.helpers.Internationalizer.internationalizeDialogToolTips(this);
        pack();
        searchStringTextField.requestFocus();
        System.out.println("Search dialog initialized");
    }
    
    public void setTranscription(BasicTranscription t){
        transcription = t;
        setSearchArea(transcription.getBody().getAllTierIDs());
    }

    public void clearSearchResult(){
        resultVector = new Vector();
        refreshResultList(resultVector);
    }
    
    public void setSearchArea(String[] tierIDs){
        String text = new String();
        for (String tierID : tierIDs) {
            try {
                String desc = transcription.getBody().getTierWithID(tierID).getDescription(transcription.getHead().getSpeakertable());
                text+=desc + " ";
            }catch (JexmaraldaException je){}
        }
        if (text.length()>100){
            text = text.substring(0,100) + "...";
        }
        this.searchAreaLabel.setText(text);
        searchArea = tierIDs;
    }

    public void gotoNextSearchResult() {
        if ((resultList.getSelectedIndex()<0) || (resultVector.size()<1)){
            return;
        }
        int selected = resultList.getSelectedIndex();
        int next = selected + 1;
        if (next>=resultVector.size()){
            next = 0;
        }
        resultList.setSelectedIndex(next);
        resultList.scrollRectToVisible(resultList.getCellBounds(next, next));
        gotoButtonActionPerformed(null);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        resultPanel = new javax.swing.JPanel();
        resultScrollPane = new javax.swing.JScrollPane();
        resultList = new javax.swing.JList();
        resultButtonPanel = new javax.swing.JPanel();
        gotoButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        closePanel = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        toggleKeyboardDisplayButton = new javax.swing.JToggleButton();
        searchParametersPanel = new javax.swing.JPanel();
        searchStringPanel = new javax.swing.JPanel();
        searchStringLabel = new javax.swing.JLabel();
        searchAreaPanel = new javax.swing.JPanel();
        changeButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        searchAreaLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        caseSensitiveCheckBox = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        itemCountLabel = new javax.swing.JLabel();
        keyboardPanelPanel = new javax.swing.JPanel();

        setTitle("Search in events");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        resultPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Result"));
        resultPanel.setPreferredSize(new java.awt.Dimension(500, 200));
        resultPanel.setLayout(new javax.swing.BoxLayout(resultPanel, javax.swing.BoxLayout.LINE_AXIS));

        resultList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultListMouseClicked(evt);
            }
        });
        resultScrollPane.setViewportView(resultList);

        resultPanel.add(resultScrollPane);

        resultButtonPanel.setLayout(new javax.swing.BoxLayout(resultButtonPanel, javax.swing.BoxLayout.Y_AXIS));

        gotoButton.setText("Go to");
        gotoButton.setEnabled(false);
        gotoButton.setMaximumSize(new java.awt.Dimension(110, 27));
        gotoButton.setMinimumSize(new java.awt.Dimension(81, 26));
        gotoButton.setPreferredSize(new java.awt.Dimension(110, 27));
        gotoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gotoButtonActionPerformed(evt);
            }
        });
        resultButtonPanel.add(gotoButton);

        nextButton.setText("Next");
        nextButton.setEnabled(false);
        nextButton.setMaximumSize(new java.awt.Dimension(110, 27));
        nextButton.setPreferredSize(new java.awt.Dimension(110, 27));
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        resultButtonPanel.add(nextButton);

        saveButton.setText("Save as...");
        saveButton.setEnabled(false);
        saveButton.setMaximumSize(new java.awt.Dimension(110, 27));
        saveButton.setMinimumSize(new java.awt.Dimension(81, 26));
        saveButton.setPreferredSize(new java.awt.Dimension(110, 27));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        resultButtonPanel.add(saveButton);

        resultPanel.add(resultButtonPanel);

        getContentPane().add(resultPanel, java.awt.BorderLayout.CENTER);

        closePanel.setLayout(new java.awt.BorderLayout());

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        closePanel.add(closeButton, java.awt.BorderLayout.CENTER);

        toggleKeyboardDisplayButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/16x16/devices/input-keyboard.png"))); // NOI18N
        toggleKeyboardDisplayButton.setToolTipText("Show keyboard");
        toggleKeyboardDisplayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleKeyboardDisplayButtonActionPerformed(evt);
            }
        });
        closePanel.add(toggleKeyboardDisplayButton, java.awt.BorderLayout.WEST);

        getContentPane().add(closePanel, java.awt.BorderLayout.SOUTH);

        searchParametersPanel.setLayout(new java.awt.GridLayout(3, 1));

        searchStringPanel.setLayout(new javax.swing.BoxLayout(searchStringPanel, javax.swing.BoxLayout.LINE_AXIS));

        searchStringLabel.setText("Search string:   ");
        searchStringLabel.setMaximumSize(new java.awt.Dimension(117, 16));
        searchStringLabel.setMinimumSize(new java.awt.Dimension(117, 16));
        searchStringLabel.setPreferredSize(new java.awt.Dimension(117, 16));
        searchStringPanel.add(searchStringLabel);

        searchParametersPanel.add(searchStringPanel);

        searchAreaPanel.setLayout(new javax.swing.BoxLayout(searchAreaPanel, javax.swing.BoxLayout.LINE_AXIS));

        changeButton.setText("Search area:   ");
        changeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeButtonActionPerformed(evt);
            }
        });
        searchAreaPanel.add(changeButton);

        jLabel1.setText("                     ");
        searchAreaPanel.add(jLabel1);

        searchAreaLabel.setForeground(new java.awt.Color(0, 51, 204));
        searchAreaLabel.setText("All                                  ");
        searchAreaPanel.add(searchAreaLabel);

        searchParametersPanel.add(searchAreaPanel);

        caseSensitiveCheckBox.setSelected(true);
        caseSensitiveCheckBox.setText("Case sensitive search");
        jPanel1.add(caseSensitiveCheckBox);
        jPanel1.add(jPanel2);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        jPanel1.add(searchButton);
        jPanel1.add(jPanel3);

        itemCountLabel.setForeground(new java.awt.Color(102, 102, 102));
        itemCountLabel.setText("    0 items found");
        jPanel1.add(itemCountLabel);

        searchParametersPanel.add(jPanel1);

        getContentPane().add(searchParametersPanel, java.awt.BorderLayout.NORTH);

        keyboardPanelPanel.setLayout(new javax.swing.BoxLayout(keyboardPanelPanel, javax.swing.BoxLayout.LINE_AXIS));
        getContentPane().add(keyboardPanelPanel, java.awt.BorderLayout.WEST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void changeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeButtonActionPerformed
        // Add your handling code here:
        TierSelectionDialog tsd = new TierSelectionDialog(new javax.swing.JFrame(), true);
        if (tsd.selectTiers(transcription, searchArea)){
            setSearchArea(tsd.getSelectedTierIDs());
        }
    }//GEN-LAST:event_changeButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // Add your handling code here:
        SaveResultDialog dialog = new SaveResultDialog(resultVector);
        dialog.saveResults(this);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // Add your handling code here:
        setVisible(false);
        dispose();        
    }//GEN-LAST:event_closeButtonActionPerformed

    private void gotoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gotoButtonActionPerformed
        // Add your handling code here:
        EventSearchResult esr = (EventSearchResult)(resultList.getSelectedValue());
        this.fireSearchResult(esr);
    }//GEN-LAST:event_gotoButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // Add your handling code here:
        if (searchStringTextField.getText().length()<=0) return;
        try{
            resultVector = EventSearcher.search(searchStringTextField.getText(), transcription, searchArea, caseSensitiveCheckBox.isSelected());
            refreshResultList(resultVector);
        } catch (JexmaraldaException je){
            JOptionPane.showMessageDialog(this, "Jexmaralda Exception" + System.getProperty("line.separator") + je.getMessage());
        }
    }//GEN-LAST:event_searchButtonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void resultListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultListMouseClicked
        if (evt.getClickCount()==2){
            gotoButtonActionPerformed(null);
        }
    }//GEN-LAST:event_resultListMouseClicked

    private void toggleKeyboardDisplayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleKeyboardDisplayButtonActionPerformed
        keyboardPanelPanel.setVisible(toggleKeyboardDisplayButton.isSelected());
    }//GEN-LAST:event_toggleKeyboardDisplayButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        gotoNextSearchResult();
    }//GEN-LAST:event_nextButtonActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        searchStringTextField.selectAll();
    }//GEN-LAST:event_formComponentShown
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox caseSensitiveCheckBox;
    private javax.swing.JButton changeButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel closePanel;
    private javax.swing.JButton gotoButton;
    private javax.swing.JLabel itemCountLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel keyboardPanelPanel;
    private javax.swing.JButton nextButton;
    private javax.swing.JPanel resultButtonPanel;
    private javax.swing.JList resultList;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JScrollPane resultScrollPane;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel searchAreaLabel;
    private javax.swing.JPanel searchAreaPanel;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchParametersPanel;
    private javax.swing.JLabel searchStringLabel;
    private javax.swing.JPanel searchStringPanel;
    private javax.swing.JToggleButton toggleKeyboardDisplayButton;
    // End of variables declaration//GEN-END:variables

    private void refreshResultList(Vector result){
        resultList.setListData(result);
        if (!result.isEmpty()){
            resultList.setSelectedIndex(0);
            gotoButton.setEnabled(true);
            nextButton.setEnabled(true);
            saveButton.setEnabled(true);
        } else {
            gotoButton.setEnabled(false);
            nextButton.setEnabled(false);
            saveButton.setEnabled(false);
        }
        itemCountLabel.setText("    " + Integer.toString(result.size()) + " items found.");
            
    }

//***************************************************************************************************************
    
    public void addSearchResultListener(SearchResultListener l) {
         listenerList.add(SearchResultListener.class, l);
    }
    
    public void removeSearchResultListener(SearchResultListener l) {
         listenerList.remove(SearchResultListener.class, l);
    }
    public void removeAllListeners(){
        listenerList = new javax.swing.event.EventListenerList();
    }
    
    
    protected void fireSearchResult(EventSearchResult esr) {
         // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
             if (listeners[i]==SearchResultListener.class) {                
                ((SearchResultListener)listeners[i+1]).processSearchResult(esr);             
            }
         }
    }
    
    @Override
    public void show(){
        System.out.println("Showing search dialog");
        java.awt.Dimension dialogSize = this.getPreferredSize();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(screenSize.width/2 - dialogSize.width/2, screenSize.height/2 - dialogSize.height/2);
        super.show();
        this.searchStringTextField.requestFocus();
        System.out.println("Search dialog should be showing");
    }
    
//***************************************************************************************************************

/*    public void focusLost(java.awt.event.FocusEvent e) {
        System.out.println("Dialog has lost focus to");
        System.out.println(e.getOppositeComponent().getClass().getName());
    }

    public void focusGained(java.awt.event.FocusEvent e) {
        System.out.println("Dialog has gained focus from");
        System.out.println(e.getOppositeComponent().getClass().getName());
    }*/
    
}
