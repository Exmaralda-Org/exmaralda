/*
 * FindDialog.java
 *
 * Created on 13. Juni 2003, 12:15
 */

package org.exmaralda.partitureditor.search;

import org.exmaralda.partitureditor.unicodeKeyboard.*;
import org.exmaralda.partitureditor.jexmaralda.*;
import java.util.*;
import javax.swing.*;
import org.exmaralda.partitureditor.jexmaraldaswing.*;

/**
 *
 * @author  thomas
 */
public class ReplaceDialog extends javax.swing.JDialog {
    
    UnicodeKeyboardPanel keyboardPanel;
    UnicodeTextField searchStringTextField;
    UnicodeTextField replaceStringTextField;
    BasicTranscription transcription;
    Vector resultVector = new Vector();
    javax.swing.event.EventListenerList listenerList = new javax.swing.event.EventListenerList();
    String[] searchArea;
    
    /** Creates new form FindDialog */
    public ReplaceDialog(java.awt.Frame parent, boolean modal, String[] externalKeyboardPaths, String generalPurposeFontName) {
        super(parent, modal);
        initComponents();
        resultList.setCellRenderer(new SearchResultListCellRenderer());
        keyboardPanel = new UnicodeKeyboardPanel(externalKeyboardPaths, generalPurposeFontName);
        getContentPane().add(keyboardPanel, java.awt.BorderLayout.WEST);
        searchStringTextField = new UnicodeTextField();
        searchStringTextField.setPreferredSize(new java.awt.Dimension(200,26));
        searchStringPanel.add(searchStringTextField);        
        searchStringTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchStringTextFieldFocusGained(evt);
            }
        });        
        searchStringTextField.requestFocus();

        replaceStringTextField = new UnicodeTextField();
        replaceStringTextField.setPreferredSize(new java.awt.Dimension(200,26));
        replaceStringPanel.add(replaceStringTextField);
        replaceStringTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                replaceStringTextFieldFocusGained(evt);
            }
        });        

        org.exmaralda.common.helpers.Internationalizer.internationalizeDialogToolTips(this);
        
        pack();
    }
    
    public void setTranscription(BasicTranscription t){
        transcription = t;
        java.util.prefs.Preferences settings = java.util.prefs.Preferences.userRoot().node("org.sfb538.exmaralda.PartiturEditor");
        String tierIDs = settings.get("REPLACE-AREA", "");
        if (tierIDs.length()==0){
            setSearchArea(transcription.getBody().getAllTierIDs());
        } else {
            String[] ids = tierIDs.split(" ");
            boolean allThere = true;
            for (String id : ids){
                if(!(transcription.getBody().containsTierWithID(id))){
                    allThere = false;
                    break;
                }
            }
            if (allThere){
                setSearchArea(ids);
            } else {
                setSearchArea(transcription.getBody().getAllTierIDs());
            }
        }
    }
    
    public void setSearchArea(String[] tierIDs){
        String text = new String();
        for (int pos=0; pos<tierIDs.length; pos++){
            try{
                String desc = transcription.getBody().getTierWithID(tierIDs[pos]).getDescription(transcription.getHead().getSpeakertable());
                text+=desc + " ";
            } catch (JexmaraldaException je){}
        }
        if (text.length()>100){
            text = text.substring(0,100) + "...";
        }
        this.searchAreaLabel.setText(text);
        searchArea = tierIDs;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        resultPanel = new javax.swing.JPanel();
        resultScrollPane = new javax.swing.JScrollPane();
        resultList = new javax.swing.JList();
        resultButtonPanel = new javax.swing.JPanel();
        replaceAllButton = new javax.swing.JButton();
        replaceButton = new javax.swing.JButton();
        gotoButton = new javax.swing.JButton();
        closePanel = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        searchParametersPanel = new javax.swing.JPanel();
        searchStringPanel = new javax.swing.JPanel();
        searchStringLabel = new javax.swing.JLabel();
        replaceStringPanel = new javax.swing.JPanel();
        replaceStringLabel = new javax.swing.JLabel();
        searchAreaPanel = new javax.swing.JPanel();
        changeButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        searchAreaLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        regexCheckBox = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        itemCountLabel = new javax.swing.JLabel();

        setTitle("Replace in events");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        resultPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Result"));
        resultPanel.setLayout(new javax.swing.BoxLayout(resultPanel, javax.swing.BoxLayout.LINE_AXIS));

        resultList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultListMouseClicked(evt);
            }
        });
        resultScrollPane.setViewportView(resultList);

        resultPanel.add(resultScrollPane);

        resultButtonPanel.setLayout(new javax.swing.BoxLayout(resultButtonPanel, javax.swing.BoxLayout.Y_AXIS));

        replaceAllButton.setText("Replace all");
        replaceAllButton.setMaximumSize(new java.awt.Dimension(110, 27));
        replaceAllButton.setMinimumSize(new java.awt.Dimension(100, 26));
        replaceAllButton.setPreferredSize(new java.awt.Dimension(110, 27));
        replaceAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceAllButtonActionPerformed(evt);
            }
        });
        resultButtonPanel.add(replaceAllButton);

        replaceButton.setText("Replace");
        replaceButton.setEnabled(false);
        replaceButton.setMaximumSize(new java.awt.Dimension(110, 27));
        replaceButton.setMinimumSize(new java.awt.Dimension(81, 26));
        replaceButton.setPreferredSize(new java.awt.Dimension(110, 27));
        replaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceButtonActionPerformed(evt);
            }
        });
        resultButtonPanel.add(replaceButton);

        gotoButton.setText("Go to");
        gotoButton.setEnabled(false);
        gotoButton.setMaximumSize(new java.awt.Dimension(110, 27));
        gotoButton.setMinimumSize(new java.awt.Dimension(81, 26));
        gotoButton.setPreferredSize(new java.awt.Dimension(110, 27));
        gotoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gotoButtonActionPerformed(evt);
            }
        });
        resultButtonPanel.add(gotoButton);

        resultPanel.add(resultButtonPanel);

        getContentPane().add(resultPanel, java.awt.BorderLayout.CENTER);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        closePanel.add(closeButton);

        getContentPane().add(closePanel, java.awt.BorderLayout.SOUTH);

        searchParametersPanel.setLayout(new java.awt.GridLayout(4, 1));

        searchStringPanel.setLayout(new javax.swing.BoxLayout(searchStringPanel, javax.swing.BoxLayout.LINE_AXIS));

        searchStringLabel.setText("Search string:   ");
        searchStringLabel.setMaximumSize(new java.awt.Dimension(117, 16));
        searchStringLabel.setMinimumSize(new java.awt.Dimension(117, 16));
        searchStringLabel.setPreferredSize(new java.awt.Dimension(117, 16));
        searchStringPanel.add(searchStringLabel);

        searchParametersPanel.add(searchStringPanel);

        replaceStringPanel.setLayout(new javax.swing.BoxLayout(replaceStringPanel, javax.swing.BoxLayout.LINE_AXIS));

        replaceStringLabel.setText("Replace string: ");
        replaceStringLabel.setMaximumSize(new java.awt.Dimension(117, 16));
        replaceStringLabel.setMinimumSize(new java.awt.Dimension(117, 16));
        replaceStringLabel.setPreferredSize(new java.awt.Dimension(117, 16));
        replaceStringPanel.add(replaceStringLabel);

        searchParametersPanel.add(replaceStringPanel);

        searchAreaPanel.setLayout(new javax.swing.BoxLayout(searchAreaPanel, javax.swing.BoxLayout.LINE_AXIS));

        changeButton.setText("Search area:   ");
        changeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeButtonActionPerformed(evt);
            }
        });
        searchAreaPanel.add(changeButton);

        jLabel1.setText("                     ");
        searchAreaPanel.add(jLabel1);

        searchAreaLabel.setForeground(new java.awt.Color(0, 51, 204));
        searchAreaLabel.setText("All                                  ");
        searchAreaPanel.add(searchAreaLabel);

        searchParametersPanel.add(searchAreaPanel);

        regexCheckBox.setText("Regular expression search");
        jPanel1.add(regexCheckBox);
        jPanel1.add(jPanel2);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        jPanel1.add(searchButton);
        jPanel1.add(jPanel3);

        itemCountLabel.setForeground(new java.awt.Color(102, 102, 102));
        itemCountLabel.setText("    0 items found");
        jPanel1.add(itemCountLabel);

        searchParametersPanel.add(jPanel1);

        getContentPane().add(searchParametersPanel, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gotoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gotoButtonActionPerformed
        // Add your handling code here:
        EventSearchResult esr = (EventSearchResult)(resultList.getSelectedValue());
        this.fireSearchResult(esr);        
    }//GEN-LAST:event_gotoButtonActionPerformed

    private void changeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeButtonActionPerformed
        // Add your handling code here:
        TierSelectionDialog tsd = new TierSelectionDialog(new javax.swing.JFrame(), true);
        if (tsd.selectTiers(transcription, searchArea)){
            setSearchArea(tsd.getSelectedTierIDs());
        }
    }//GEN-LAST:event_changeButtonActionPerformed

    private void replaceAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceAllButtonActionPerformed
        if (searchStringTextField.getText().length()<=0) return;
        try{
            resultVector = EventSearcher.search(searchStringTextField.getText(), transcription, searchArea, true, regexCheckBox.isSelected());
            int noItems = resultVector.size();
            refreshResultList(new Vector());
            fireReplaceAll(resultVector, searchStringTextField.getText(), replaceStringTextField.getText());
            JOptionPane.showMessageDialog(this, Integer.toString(noItems) + " items replaced.");
        } catch (JexmaraldaException je){
            JOptionPane.showMessageDialog(this, "Jexmaralda Exception" + System.getProperty("line.separator") + je.getMessage());
        }
        // Add your handling code here:
    }//GEN-LAST:event_replaceAllButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // Add your handling code here:
        setVisible(false);
        String searchIDs = "";
        if (searchArea.length<transcription.getBody().getNumberOfTiers()){
            for (String tierID : searchArea){
                searchIDs+= tierID + " ";
            }
        }
        java.util.prefs.Preferences settings = java.util.prefs.Preferences.userRoot().node("org.sfb538.exmaralda.PartiturEditor");
        settings.put("REPLACE-AREA", searchIDs);
        dispose();        
    }//GEN-LAST:event_closeButtonActionPerformed

    private void replaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceButtonActionPerformed
        // Add your handling code here:
        Object[] v = resultList.getSelectedValues();
        for (Object o : v){
            EventSearchResult esr = (EventSearchResult)o;
            fireReplaceResult(esr, replaceStringTextField.getText());
            String memoTier = esr.tierID;
            String memoTLI = esr.event.getStart();
            resultVector.remove(o);
            if (esr.length!=replaceStringTextField.getText().length()){
                for (Object o2 : resultVector){
                    EventSearchResult esr2 = (EventSearchResult)o2;
                    if (esr2.tierID.equals(memoTier) && (esr2.event.getStart().equals(memoTLI))){
                        esr2.offset+=(replaceStringTextField.getText().length() - esr.length);
                    }
                }
            }
        }
        refreshResultList(resultVector);

        //EventSearchResult esr = (EventSearchResult)(resultList.getSelectedValue());
        //this.fireReplaceResult(esr, replaceStringTextField.getText());
        
    }//GEN-LAST:event_replaceButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // Add your handling code here:
        if (searchStringTextField.getText().length()<=0) return;
        try{
            resultVector = EventSearcher.search(searchStringTextField.getText(), transcription, searchArea, true, regexCheckBox.isSelected());
            refreshResultList(resultVector);
        } catch (JexmaraldaException je){
            JOptionPane.showMessageDialog(this, "Jexmaralda Exception" + System.getProperty("line.separator") + je.getMessage());
        }
    }//GEN-LAST:event_searchButtonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void resultListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultListMouseClicked
        if (evt.getClickCount()==2){
            gotoButtonActionPerformed(null);
        }

    }//GEN-LAST:event_resultListMouseClicked

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        searchStringTextField.selectAll();
    }//GEN-LAST:event_formComponentShown
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton changeButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel closePanel;
    private javax.swing.JButton gotoButton;
    private javax.swing.JLabel itemCountLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JCheckBox regexCheckBox;
    private javax.swing.JButton replaceAllButton;
    private javax.swing.JButton replaceButton;
    private javax.swing.JLabel replaceStringLabel;
    private javax.swing.JPanel replaceStringPanel;
    private javax.swing.JPanel resultButtonPanel;
    private javax.swing.JList resultList;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JScrollPane resultScrollPane;
    private javax.swing.JLabel searchAreaLabel;
    private javax.swing.JPanel searchAreaPanel;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchParametersPanel;
    private javax.swing.JLabel searchStringLabel;
    private javax.swing.JPanel searchStringPanel;
    // End of variables declaration//GEN-END:variables

    private void refreshResultList(Vector result){
        resultList.setListData(result);
        if (!result.isEmpty()){
            resultList.setSelectedIndex(0);
            replaceButton.setEnabled(true);
            gotoButton.setEnabled(true);
            replaceAllButton.setEnabled(true);
        } else {
            replaceButton.setEnabled(false);
            gotoButton.setEnabled(false);
            replaceAllButton.setEnabled(false);
        }
        this.itemCountLabel.setText("    " + Integer.toString(result.size()) + " items found.");
            
    }

//***************************************************************************************************************
    
    public void addSearchResultListener(SearchResultListener l) {
         listenerList.add(SearchResultListener.class, l);
    }
    
    public void removeSearchResultListener(SearchResultListener l) {
         listenerList.remove(SearchResultListener.class, l);
    }
    public void removeAllListeners(){
        listenerList = new javax.swing.event.EventListenerList();
    }
    
    protected void fireSearchResult(EventSearchResult esr) {
         // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
             if (listeners[i]==SearchResultListener.class) {                
                ((SearchResultListener)listeners[i+1]).processSearchResult(esr);             
            }
         }
    }
    
    protected void fireReplaceResult(EventSearchResult esr, String replaceString) {
         // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
             if (listeners[i]==SearchResultListener.class) {                
                ((SearchResultListener)listeners[i+1]).processReplaceResult(esr, replaceString);             
            }
         }
        //searchButtonActionPerformed(null);
    }
    
    protected void fireReplaceAll(Vector resultVector, String searchString, String replaceString){
         // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
             if (listeners[i]==SearchResultListener.class) {                
                ((SearchResultListener)listeners[i+1]).processReplaceAll(resultVector, searchString, replaceString, regexCheckBox.isSelected());             
            }
         }
    }
    

    public void show(){
        java.awt.Dimension dialogSize = this.getPreferredSize();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(screenSize.width/2 - dialogSize.width/2, screenSize.height/2 - dialogSize.height/2);
        super.show();
    }
    
//***************************************************************************************************************


    private void searchStringTextFieldFocusGained(java.awt.event.FocusEvent evt){
        keyboardPanel.removeAllListeners();
        keyboardPanel.addListener(searchStringTextField);
    }

    private void replaceStringTextFieldFocusGained(java.awt.event.FocusEvent evt){
        keyboardPanel.removeAllListeners();
        keyboardPanel.addListener(replaceStringTextField);
    }
}
