<?xml version="1.0" encoding="UTF-8"?><!-- edited with XML Spy v3.5 NT (http://www.xmlspy.com) by Thomas Schmidt (UniversitÃ¤t Hamburg) --><!-- xalan namespace needed for nodeset extension --><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xalan="http://xml.apache.org/xalan">	<xsl:output method="xml" indent="yes" encoding="UTF-8"/>	<!-- store the common timeline in a variable -->	<xsl:variable name="ctl">		<xsl:element name="ctl">			<xsl:for-each select="//common-timeline/tli">				<xsl:element name="tli">					<xsl:copy-of select="@*"/>					<xsl:value-of select="position()"/>				</xsl:element>			</xsl:for-each>		</xsl:element>	</xsl:variable>	<!-- create a tasx document, a session and then process -->	<!-- the exm meta-information, the exm speakertable and the exm tiers -->	<xsl:template match="/">		<xsl:element name="tasx">			<xsl:element name="session">				<xsl:apply-templates select="//head/meta-information"/>				<xsl:apply-templates select="//head/speakertable/speaker"/>				<xsl:apply-templates select="//basic-body/tier"/>			</xsl:element>		</xsl:element>	</xsl:template>	<!-- process the meta-information -->	<xsl:template match="meta-information">		<!-- first create a meta element for the fixed EXMARaLDA attributes -->		<xsl:element name="meta">			<xsl:attribute name="m-id">exmaralda fix</xsl:attribute>			<xsl:element name="desc">				<xsl:element name="name">project-name</xsl:element>				<xsl:element name="val">					<xsl:value-of select="project-name"/>				</xsl:element>			</xsl:element>			<xsl:element name="desc">				<xsl:element name="name">transcription-name</xsl:element>				<xsl:element name="val">					<xsl:value-of select="transcription-name"/>				</xsl:element>			</xsl:element>			<xsl:element name="desc">				<xsl:element name="name">referenced-file</xsl:element>				<xsl:element name="val">					<xsl:value-of select="referenced-file/@url"/>				</xsl:element>			</xsl:element>			<xsl:element name="desc">				<xsl:element name="name">comment</xsl:element>				<xsl:element name="val">					<xsl:value-of select="comment"/>				</xsl:element>			</xsl:element>			<xsl:element name="desc">				<xsl:element name="name">transcription-convention</xsl:element>				<xsl:element name="val">					<xsl:value-of select="transcription-convention"/>				</xsl:element>			</xsl:element>		</xsl:element>		<!-- then create a meta element for the user-defined EXMARaLDA attributes -->		<xsl:element name="meta">			<xsl:attribute name="m-id">exmaralda ud</xsl:attribute>			<xsl:apply-templates select="ud-meta-information/ud-information"/>		</xsl:element>	</xsl:template>	<!-- process the user-defined EXMARaLDA attributes -->	<xsl:template match="ud-information">		<xsl:element name="desc">			<xsl:element name="name">				<xsl:value-of select="@attribute-name"/>			</xsl:element>			<xsl:element name="val">				<xsl:value-of select="."/>			</xsl:element>		</xsl:element>	</xsl:template>	<!-- for each EXMARaLDA speaker create a TASX meta element -->	<xsl:template match="speaker">		<xsl:element name="meta">			<xsl:attribute name="m-id">ExSpeaker <xsl:value-of select="@id"/></xsl:attribute>			<xsl:element name="desc">				<xsl:element name="name">abbreviation</xsl:element>				<xsl:element name="val">					<xsl:value-of select="abbreviation"/>				</xsl:element>			</xsl:element>			<xsl:element name="desc">				<xsl:element name="name">sex</xsl:element>				<xsl:element name="val">					<xsl:value-of select="sex/@value"/>				</xsl:element>			</xsl:element>			<xsl:element name="desc">				<xsl:element name="name">comment</xsl:element>				<xsl:element name="val">					<xsl:value-of select="comment"/>				</xsl:element>			</xsl:element>			<xsl:apply-templates select="ud-speaker-information/ud-information"/>			<xsl:apply-templates select="languages-used/language" mode="languages-used"/>			<xsl:apply-templates select="l1/language" mode="l1"/>			<xsl:apply-templates select="l2/language" mode="l2"/>		</xsl:element>	</xsl:template>	<xsl:template match="language" mode="languages-used">		<xsl:element name="desc">			<xsl:element name="name">language-used</xsl:element>			<xsl:element name="val">				<xsl:value-of select="@xml:lang"/>				<xsl:value-of select="@lang"/>			</xsl:element>		</xsl:element>	</xsl:template>	<xsl:template match="language" mode="l1">		<xsl:element name="desc">			<xsl:element name="name">l1</xsl:element>			<xsl:element name="val">				<xsl:value-of select="@xml:lang"/>			</xsl:element>		</xsl:element>	</xsl:template>	<xsl:template match="language" mode="l2">		<xsl:element name="desc">			<xsl:element name="name">l2</xsl:element>			<xsl:element name="val">				<xsl:value-of select="@xml:lang"/>			</xsl:element>		</xsl:element>	</xsl:template>	<xsl:template match="tier">		<xsl:element name="layer">			<xsl:variable name="id">				<xsl:value-of select="@speaker"/>			</xsl:variable>			<xsl:attribute name="l-id"><xsl:value-of select="//speaker[@id = $id]/abbreviation"/></xsl:attribute>			<xsl:element name="meta">				<xsl:attribute name="m-id">ExTier <xsl:value-of select="@id"/></xsl:attribute>				<xsl:element name="desc">					<xsl:element name="name">category</xsl:element>					<xsl:element name="val">						<xsl:value-of select="@category"/>					</xsl:element>				</xsl:element>				<xsl:element name="desc">					<xsl:element name="name">type</xsl:element>					<xsl:element name="val">						<xsl:value-of select="@type"/>					</xsl:element>				</xsl:element>				<xsl:apply-templates select="ud-tier-information/ud-information"/>			</xsl:element>			<xsl:apply-templates select="event"/>		</xsl:element>	</xsl:template>	<xsl:template match="event">		<xsl:element name="event">			<xsl:attribute name="e-id"/>			<xsl:variable name="start">				<xsl:value-of select="@start"/>			</xsl:variable>			<xsl:variable name="end">				<xsl:value-of select="@end"/>			</xsl:variable>			<!-- if not all timeline items have an absolute time value -->			<xsl:if test="count(xalan:nodeset($ctl)//tli/@time) != count(xalan:nodeset($ctl)//tli)">				<xsl:attribute name="start"><xsl:value-of select="xalan:nodeset($ctl)//tli[@id = $start]"/></xsl:attribute>				<xsl:attribute name="end"><xsl:value-of select="xalan:nodeset($ctl)//tli[@id = $end]"/></xsl:attribute>			</xsl:if>			<!-- else (i.e. all timeline items have an absolute time value) -->			<xsl:if test="count(xalan:nodeset($ctl)//tli/@time) = count(xalan:nodeset($ctl)//tli)">				<xsl:attribute name="start"><xsl:value-of select="xalan:nodeset($ctl)//tli[@id = $start]/@time"/></xsl:attribute>				<xsl:attribute name="end"><xsl:value-of select="xalan:nodeset($ctl)//tli[@id = $end]/@time"/></xsl:attribute>			</xsl:if>			<xsl:value-of select="./text()"/>			<xsl:element name="meta">				<xsl:attribute name="m-id">ExEvent <xsl:value-of select="position()"/></xsl:attribute>				<xsl:element name="desc">					<xsl:element name="name">medium</xsl:element>					<xsl:element name="val">						<xsl:value-of select="@medium"/>					</xsl:element>				</xsl:element>				<xsl:element name="desc">					<xsl:element name="name">url</xsl:element>					<xsl:element name="val">						<xsl:value-of select="@url"/>					</xsl:element>				</xsl:element>				<xsl:apply-templates select="ud-information"/>			</xsl:element>		</xsl:element>	</xsl:template></xsl:stylesheet>