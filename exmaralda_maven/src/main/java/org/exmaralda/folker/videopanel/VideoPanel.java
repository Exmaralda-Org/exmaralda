/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.exmaralda.folker.videopanel;

import java.awt.Component;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import org.exmaralda.common.ExmaraldaApplication;
import org.exmaralda.folker.timeview.TimeSelectionEvent;
import org.exmaralda.folker.timeview.TimeSelectionListener;
import org.exmaralda.partitureditor.jexmaraldaswing.fileFilters.ParameterFileFilter;
import org.exmaralda.partitureditor.sound.AVFPlayer;
import org.exmaralda.partitureditor.sound.JDSPlayer;
import org.exmaralda.partitureditor.sound.JavaFXPlayer;
import org.exmaralda.partitureditor.sound.Playable;
import org.exmaralda.partitureditor.sound.PlayableEvent;
import org.exmaralda.partitureditor.sound.PlayableListener;

/**
 *
 * @author Schmidt
 */
public class VideoPanel extends javax.swing.JDialog implements PlayableListener, TimeSelectionListener {

    Playable videoPlayer;
    
    double startTime = 0.0;
    double endTime = 10.0;
    private String preferredPath = "C:\\Users\\Schmidt\\Dropbox\\IDS\\VIDEO";
    
    int sourceWidth = -1;
    int sourceHeight = -1;
    
    /**
     * Creates new form VideoPanel
     * @param parent
     * @param modal
     */
    public VideoPanel(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        // changed 21-11-2017: issue #82
        String os = System.getProperty("os.name").substring(0,3);
        Preferences prefs = Preferences.userRoot().node(((ExmaraldaApplication)parent).getPreferencesNode());
        
        String otherPlayerType = prefs.get("PlayerType", "JavaFX-Player");
        String playerType = prefs.get("VideoPlayerType", otherPlayerType);
        
        if (os.equalsIgnoreCase("win") && playerType.equals("JDS-Player")) {
            videoPlayer = new JDSPlayer();
            setTitle("FOLKER Video Panel [JDS]");
        } else if (os.equalsIgnoreCase("mac") && playerType.equals("AVF-Player")){
            videoPlayer = new AVFPlayer();
            setTitle("FOLKER Video Panel [AVF]");
        } else {
            videoPlayer = new JavaFXPlayer();
            setTitle("FOLKER Video Panel [JavaFX]");            
        }
        //videoPlayer = new MMFPlayer();
        videoPlayer.addPlayableListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        videoDisplayPanel = new javax.swing.JPanel();
        timePanel = new javax.swing.JPanel();
        startPositionLabel = new javax.swing.JLabel();
        currentPositionLabel = new javax.swing.JLabel();
        endPositionLabel = new javax.swing.JLabel();
        bottomPanel = new javax.swing.JPanel();
        controlsPanel = new javax.swing.JPanel();
        playSelectionButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        filePanel = new javax.swing.JPanel();
        openFileButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FOLKER Video Panel");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        videoDisplayPanel.setBackground(new java.awt.Color(153, 153, 153));
        videoDisplayPanel.setPreferredSize(new java.awt.Dimension(480, 320));
        getContentPane().add(videoDisplayPanel, java.awt.BorderLayout.CENTER);

        startPositionLabel.setForeground(new java.awt.Color(0, 255, 0));
        startPositionLabel.setText("-");
        timePanel.add(startPositionLabel);

        currentPositionLabel.setText("-");
        timePanel.add(currentPositionLabel);

        endPositionLabel.setForeground(new java.awt.Color(255, 0, 0));
        endPositionLabel.setText("-");
        endPositionLabel.setToolTipText("");
        timePanel.add(endPositionLabel);

        getContentPane().add(timePanel, java.awt.BorderLayout.PAGE_START);

        bottomPanel.setLayout(new java.awt.BorderLayout());

        playSelectionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/16x16/actions/media-playback-start.png"))); // NOI18N
        playSelectionButton.setText("[*]");
        playSelectionButton.setToolTipText("Auswahl abspielen");
        playSelectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playSelectionButtonActionPerformed(evt);
            }
        });
        controlsPanel.add(playSelectionButton);

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/16x16/actions/media-playback-stop.png"))); // NOI18N
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        controlsPanel.add(stopButton);

        bottomPanel.add(controlsPanel, java.awt.BorderLayout.CENTER);

        openFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/16x16/devices/video-display.png"))); // NOI18N
        openFileButton.setToolTipText("Videodatei Ã¶ffnen...");
        openFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileButtonActionPerformed(evt);
            }
        });
        filePanel.add(openFileButton);

        bottomPanel.add(filePanel, java.awt.BorderLayout.EAST);

        getContentPane().add(bottomPanel, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileButtonActionPerformed
        JFileChooser jfc = new JFileChooser();
        //String[] suffixes = {"mpg", "mpeg"};
        //jfc.setFileFilter(new ParameterFileFilter(suffixes, "MPEG-1 Videodateien (*.mpg, *.mpeg)"));
        String[] mpeg4Suffixes = {"mp4"};
        FileFilter mpeg4FileFilter = new ParameterFileFilter(mpeg4Suffixes, "MPEG-4 Videodateien (*.mp4)");
        String[] mpeg1Suffixes = {"mpg", "mpeg"};
        FileFilter mpeg1FileFilter = new ParameterFileFilter(mpeg1Suffixes, "MPEG-1 Videodateien (*.mpg, *.mpeg)");
        
        
        jfc.addChoosableFileFilter(mpeg4FileFilter);
        jfc.addChoosableFileFilter(mpeg1FileFilter);
        jfc.setFileFilter(mpeg4FileFilter);
        jfc.setAcceptAllFileFilterUsed(false);
        //jfc.setFileFilter(new ParameterFileFilter("mp4", "MPEG-1 Videodateien (*.mp4)"));
        jfc.setCurrentDirectory(new File(preferredPath));
        int ret = jfc.showOpenDialog(this);
        if (ret==JFileChooser.APPROVE_OPTION){
            try {
                File f = jfc.getSelectedFile();
                openVideoFile(f);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(bottomPanel, ex);
            }
        }
    }//GEN-LAST:event_openFileButtonActionPerformed

    private void playSelectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playSelectionButtonActionPerformed
        videoPlayer.startPlayback();
    }//GEN-LAST:event_playSelectionButtonActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized

        if (videoPlayer.getVisibleComponent()==null) return;
        int videoDisplayPanelWidth = videoDisplayPanel.getWidth();
        int videoDisplayPanelHeight = videoDisplayPanel.getHeight();
        Dimension dimensionByWidth = calculateDimensionByWidth(sourceWidth, sourceHeight, videoDisplayPanelWidth);
        Dimension dimensionByHeight = calculateDimensionByHeight(sourceWidth, sourceHeight, videoDisplayPanelHeight);
        // use the smaller of the two because it is guaranteed to fit
        if (dimensionByWidth.width < dimensionByHeight.width){
           videoPlayer.getVisibleComponent().setPreferredSize(dimensionByWidth);
        } else {
           videoPlayer.getVisibleComponent().setPreferredSize(dimensionByHeight);            
        }
        //pack();
    }//GEN-LAST:event_formComponentResized

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        videoPlayer.stopPlayback();
    }//GEN-LAST:event_stopButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VideoPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VideoPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VideoPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VideoPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                VideoPanel dialog = new VideoPanel(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JPanel controlsPanel;
    private javax.swing.JLabel currentPositionLabel;
    private javax.swing.JLabel endPositionLabel;
    private javax.swing.JPanel filePanel;
    private javax.swing.JButton openFileButton;
    private javax.swing.JButton playSelectionButton;
    private javax.swing.JLabel startPositionLabel;
    private javax.swing.JButton stopButton;
    private javax.swing.JPanel timePanel;
    private javax.swing.JPanel videoDisplayPanel;
    // End of variables declaration//GEN-END:variables

    private void openVideoFile(File f) throws IOException {

        // changed 21-11-2017: issue #82
        String os = System.getProperty("os.name").substring(0,3);
        if (videoPlayer instanceof JavaFXPlayer) {
            JavaFXPlayer jfxPlayer = (JavaFXPlayer)videoPlayer;       
            jfxPlayer.setSoundFile(f.getAbsolutePath());

            videoDisplayPanel.removeAll();

            if (jfxPlayer.getVisibleComponent()!=null){
                Component c = jfxPlayer.getVisibleComponent();
                // change 02-06-2015: attempt to set size for video
                sourceWidth = jfxPlayer.getSourceWidth();
                sourceHeight = jfxPlayer.getSourceHeight();
                Dimension initialDimension = this.calculateInitialDimension(sourceWidth, sourceHeight);
                c.setPreferredSize(initialDimension);
                videoDisplayPanel.add(c);
                videoDisplayPanel.setPreferredSize(c.getPreferredSize());
                //pack();
            }
        } else if (videoPlayer instanceof JDSPlayer) {
            JDSPlayer jdsPlayer = (JDSPlayer)videoPlayer;       
            jdsPlayer.setSoundFile(f.getAbsolutePath());

            videoDisplayPanel.removeAll();

            if (jdsPlayer.getVisibleComponent()!=null){
                Component c = jdsPlayer.getVisibleComponent();
                // change 02-06-2015: attempt to set size for video
                sourceWidth = jdsPlayer.getSourceWidth();
                sourceHeight = jdsPlayer.getSourceHeight();
                Dimension initialDimension = this.calculateInitialDimension(sourceWidth, sourceHeight);
                c.setPreferredSize(initialDimension);
                videoDisplayPanel.add(c);
                videoDisplayPanel.setPreferredSize(c.getPreferredSize());
                //pack();
            }
        } else if (videoPlayer instanceof AVFPlayer){
            AVFPlayer avfPlayer = (AVFPlayer)videoPlayer;
            avfPlayer.setSoundFile(f.getAbsolutePath());

            videoDisplayPanel.removeAll();

            if (avfPlayer.getVisibleComponent()!=null){
                Component c = avfPlayer.getVisibleComponent();
                sourceWidth = 480;
                sourceHeight = 270;
                System.out.println("CocoaQTPlayer has set movie width/height to 480/270");
                Dimension initialDimension = this.calculateInitialDimension(sourceWidth, sourceHeight);
                c.setPreferredSize(initialDimension);
                videoDisplayPanel.add(c);
                videoDisplayPanel.setPreferredSize(c.getPreferredSize());
            }
            
            // this beast needs to be initialised somehow
            avfPlayer.setStartTime(0.01);
            avfPlayer.setEndTime(0.02);
            avfPlayer.startPlayback();
            
        }
    }

    @Override
    public void processPlayableEvent(PlayableEvent e) {
        double currentPosition = e.getPosition();
        currentPositionLabel.setText("   " + org.exmaralda.folker.utilities.TimeStringFormatter.formatMiliseconds(currentPosition*1000.0,2) + "   ");
    }

    @Override
    public void processTimeSelectionEvent(TimeSelectionEvent event) {

        String os = System.getProperty("os.name").substring(0,3);
        
        if (event.getType()!=TimeSelectionEvent.ZOOM_CHANGED){
            double selectionStart = event.getStartTime();
            double selectionEnd = event.getEndTime();
            currentPositionLabel.setText("   " + org.exmaralda.folker.utilities.TimeStringFormatter.formatMiliseconds(selectionStart,2) + "   ");

            if (selectionStart!=selectionEnd){
                startPositionLabel.setText(org.exmaralda.folker.utilities.TimeStringFormatter.formatMiliseconds(selectionStart,2));
                endPositionLabel.setText(org.exmaralda.folker.utilities.TimeStringFormatter.formatMiliseconds(selectionEnd,2));
                
                videoPlayer.setStartTime(selectionStart / 1000.0);
                videoPlayer.setEndTime(selectionEnd / 1000.0);
                playSelectionButton.setEnabled(true);
                
                // issue #189
                if (videoPlayer instanceof JavaFXPlayer) {
                    ((JavaFXPlayer)videoPlayer).updateVideo(selectionStart / 1000.0);
                } else if (videoPlayer instanceof AVFPlayer) {
                    ((AVFPlayer)videoPlayer).updateVideo(selectionStart / 1000.0);
                } else if (videoPlayer instanceof JDSPlayer) {
                    ((JDSPlayer)videoPlayer).updateVideo(selectionStart / 1000.0);
                }


            } else {
                startPositionLabel.setText("-");
                endPositionLabel.setText("-");
                videoPlayer.setStartTime(selectionStart / 1000.0);
                videoPlayer.setEndTime(videoPlayer.getTotalLength());
                playSelectionButton.setEnabled(false);
            }
            
        }
        
    }

    public void setPreferredPath(String currentMediaPath) {
        preferredPath = currentMediaPath;
    }
    
    int MAXIMAL_INITIAL_WIDTH = 480;
    
    private Dimension calculateInitialDimension(int sourceWidth, int sourceHeight) {
        if (sourceWidth<=MAXIMAL_INITIAL_WIDTH){
            // don't make it bigger than necessary
            return new java.awt.Dimension(sourceWidth, sourceHeight);                    
        }
        return calculateDimensionByWidth(sourceWidth, sourceHeight, MAXIMAL_INITIAL_WIDTH);
    }
    
    private Dimension calculateDimensionByWidth(int sourceWidth, int sourceHeight, int actualWidth) {
        double ratio = (double)((double)actualWidth/(double)sourceWidth);
        int calculatedHeight = (int) Math.round(ratio * sourceHeight);
        Dimension result = new Dimension(actualWidth, calculatedHeight);
        return result;
    }
    
    private Dimension calculateDimensionByHeight(int sourceWidth, int sourceHeight, int actualHeight) {
        double ratio = (double)((double)actualHeight/(double)sourceHeight);
        int calculatedWidth = (int) Math.round(ratio * sourceWidth);
        Dimension result = new Dimension(calculatedWidth, actualHeight);
        return result;
    }

    
}
