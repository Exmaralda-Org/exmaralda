/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.exmaralda.folker.gui;

//import com.sun.awt.AWTUtilities;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.RowSorter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import org.exmaralda.folker.application.ApplicationControl;
import org.exmaralda.folker.data.Timepoint;
import org.exmaralda.folker.listview.TimepointTableCellRenderer;

/**
 *
 * @author Schmidt
 */
public class MaskDialog extends javax.swing.JDialog implements MouseListener, ListSelectionListener /*, TimeSelectionListener*/ { 

    MaskTableModel tableModel;
    ApplicationControl applicationControl;
    public TimepointTableCellRenderer timepointTableCellRenderer = new TimepointTableCellRenderer();
    
    /**
     * Creates new form MaskDialog
     */
    public MaskDialog(java.awt.Frame parent, boolean modal, ApplicationControl ac)  {
        super(parent, modal);
        applicationControl = ac;
        initComponents();
        formatTable();
        maskTable.getSelectionModel().addListSelectionListener(this);
        maskTable.addMouseListener(this);
        maskTable.setAutoCreateRowSorter(true);
        pack();
    }
    
    public void setData(){
        //RowSorter<? extends TableModel> rowSorter = maskTable.getRowSorter();
        tableModel = new MaskTableModel(applicationControl.getTranscriptionHead());
        maskTable.setModel(tableModel);        
        //maskTable.setRowSorter(rowSorter);
        formatTable();
    }

    private void formatTable(){
        maskTable.getColumnModel().getColumn(0).setMinWidth(150);        
        maskTable.getColumnModel().getColumn(1).setMinWidth(150);        
        maskTable.getColumnModel().getColumn(2).setMinWidth(500);
        maskTable.getColumnModel().getColumn(0).setCellRenderer(timepointTableCellRenderer);
        maskTable.getColumnModel().getColumn(1).setCellRenderer(timepointTableCellRenderer);        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        tableScrollPanel = new javax.swing.JScrollPane();
        maskTable = new javax.swing.JTable();
        topPanel = new javax.swing.JPanel();
        exportButton = new javax.swing.JButton();
        opacitySlider = new javax.swing.JSlider();
        leftPanel = new javax.swing.JPanel();
        startTimePanel = new javax.swing.JPanel();
        decreaseStartButton = new javax.swing.JButton();
        increaseStartButton = new javax.swing.JButton();
        playPanel = new javax.swing.JPanel();
        playButton = new javax.swing.JButton();
        endTimePanel = new javax.swing.JPanel();
        decreaseEndButton = new javax.swing.JButton();
        increaseEndButton = new javax.swing.JButton();
        rightPanel = new javax.swing.JPanel();
        removeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        mainPanel.setPreferredSize(new java.awt.Dimension(810, 400));
        mainPanel.setLayout(new javax.swing.BoxLayout(mainPanel, javax.swing.BoxLayout.LINE_AXIS));

        tableScrollPanel.setPreferredSize(new java.awt.Dimension(800, 400));

        maskTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        maskTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tableScrollPanel.setViewportView(maskTable);

        mainPanel.add(tableScrollPanel);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        exportButton.setAction(new org.exmaralda.folker.actions.transcriptionactions.ExportMaskAction(applicationControl, "Export...", new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/16x16/actions/document-save-as.png"))));
        exportButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/16x16/actions/document-save-as.png"))); // NOI18N
        exportButton.setText("Export...");
        topPanel.add(exportButton);

        opacitySlider.setMajorTickSpacing(50);
        opacitySlider.setMinimum(50);
        opacitySlider.setMinorTickSpacing(10);
        opacitySlider.setPaintTicks(true);
        opacitySlider.setValue(70);
        opacitySlider.setEnabled(false);
        opacitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                opacitySliderStateChanged(evt);
            }
        });
        topPanel.add(opacitySlider);

        getContentPane().add(topPanel, java.awt.BorderLayout.PAGE_START);

        leftPanel.setPreferredSize(new java.awt.Dimension(100, 160));

        decreaseStartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/16x16/actions/media-seek-backward.png"))); // NOI18N
        decreaseStartButton.setEnabled(false);
        decreaseStartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decreaseStartButtonActionPerformed(evt);
            }
        });
        startTimePanel.add(decreaseStartButton);

        increaseStartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/16x16/actions/media-seek-forward.png"))); // NOI18N
        increaseStartButton.setEnabled(false);
        increaseStartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseStartButtonActionPerformed(evt);
            }
        });
        startTimePanel.add(increaseStartButton);

        leftPanel.add(startTimePanel);

        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/22x22/actions/media-playback-start.png"))); // NOI18N
        playButton.setEnabled(false);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        playPanel.add(playButton);

        leftPanel.add(playPanel);

        decreaseEndButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/16x16/actions/media-seek-backward.png"))); // NOI18N
        decreaseEndButton.setEnabled(false);
        decreaseEndButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decreaseEndButtonActionPerformed(evt);
            }
        });
        endTimePanel.add(decreaseEndButton);

        increaseEndButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/16x16/actions/media-seek-forward.png"))); // NOI18N
        increaseEndButton.setEnabled(false);
        increaseEndButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseEndButtonActionPerformed(evt);
            }
        });
        endTimePanel.add(increaseEndButton);

        leftPanel.add(endTimePanel);

        getContentPane().add(leftPanel, java.awt.BorderLayout.WEST);

        removeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/22x22/actions/list-remove.png"))); // NOI18N
        removeButton.setToolTipText("Eintrag entfernen");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        rightPanel.add(removeButton);

        getContentPane().add(rightPanel, java.awt.BorderLayout.EAST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        applicationControl.playSelection();
    }//GEN-LAST:event_playButtonActionPerformed

    private void increaseStartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_increaseStartButtonActionPerformed
        int row = maskTable.getRowSorter().convertRowIndexToModel(maskTable.getSelectedRow());
        //int row = maskTable.getSelectedRow();
        if (row<0) return;
        Timepoint maskTimeStartPoint = (Timepoint)tableModel.getValueAt(row, 0);
        Timepoint maskTimeEndPoint = (Timepoint)tableModel.getValueAt(row, 1);
        double newTime = Math.min(maskTimeEndPoint.getTime()-50, maskTimeStartPoint.getTime()+ 50);
        maskTimeStartPoint.setTime(newTime);
        getModel().setStartTime(row, newTime);
        applicationControl.setMaskTimepoints(maskTimeStartPoint, maskTimeEndPoint);
    }//GEN-LAST:event_increaseStartButtonActionPerformed

    private void decreaseStartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decreaseStartButtonActionPerformed
        int row = maskTable.getRowSorter().convertRowIndexToModel(maskTable.getSelectedRow());
        //int row = maskTable.getSelectedRow();
        if (row<0) return;
        Timepoint maskTimeStartPoint = (Timepoint)tableModel.getValueAt(row, 0);
        Timepoint maskTimeEndPoint = (Timepoint)tableModel.getValueAt(row, 1);
        double newTime = Math.max(0.0, maskTimeStartPoint.getTime() - 50);
        maskTimeStartPoint.setTime(newTime);
        getModel().setStartTime(row, newTime);
        applicationControl.setMaskTimepoints(maskTimeStartPoint, maskTimeEndPoint);
    }//GEN-LAST:event_decreaseStartButtonActionPerformed

    private void decreaseEndButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decreaseEndButtonActionPerformed
        int row = maskTable.getRowSorter().convertRowIndexToModel(maskTable.getSelectedRow());
        //int row = maskTable.getSelectedRow();
        if (row<0) return;
        Timepoint maskTimeStartPoint = (Timepoint)tableModel.getValueAt(row, 0);
        Timepoint maskTimeEndPoint = (Timepoint)tableModel.getValueAt(row, 1);
        double newTime = Math.max(maskTimeStartPoint.getTime() + 50, maskTimeEndPoint.getTime() - 50);
        maskTimeEndPoint.setTime(newTime);
        getModel().setEndTime(row, newTime);
        applicationControl.setMaskTimepoints(maskTimeStartPoint, maskTimeEndPoint);
    }//GEN-LAST:event_decreaseEndButtonActionPerformed

    private void increaseEndButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_increaseEndButtonActionPerformed
        int row = maskTable.getRowSorter().convertRowIndexToModel(maskTable.getSelectedRow());
        //int row = maskTable.getSelectedRow();
        if (row<0) return;
        Timepoint maskTimeStartPoint = (Timepoint)tableModel.getValueAt(row, 0);
        Timepoint maskTimeEndPoint = (Timepoint)tableModel.getValueAt(row, 1);
        double newTime = Math.min(applicationControl.player.getTotalLength()*1000.0, maskTimeEndPoint.getTime() +50);
        maskTimeEndPoint.setTime(newTime);
        getModel().setEndTime(row, newTime);
        applicationControl.setMaskTimepoints(maskTimeStartPoint, maskTimeEndPoint);

    }//GEN-LAST:event_increaseEndButtonActionPerformed

    private void opacitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_opacitySliderStateChanged
        //AWTUtilities.setWindowOpacity(this, (float)opacitySlider.getValue()/100.0f);
    }//GEN-LAST:event_opacitySliderStateChanged

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int row = maskTable.getRowSorter().convertRowIndexToModel(maskTable.getSelectedRow());
        //int row = maskTable.getSelectedRow();
        if (row<0) return;
        getModel().removeEntry(row);
    }//GEN-LAST:event_removeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MaskDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MaskDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MaskDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MaskDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MaskDialog dialog = new MaskDialog(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        }); 
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton decreaseEndButton;
    private javax.swing.JButton decreaseStartButton;
    private javax.swing.JPanel endTimePanel;
    private javax.swing.JButton exportButton;
    private javax.swing.JButton increaseEndButton;
    private javax.swing.JButton increaseStartButton;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTable maskTable;
    private javax.swing.JSlider opacitySlider;
    private javax.swing.JButton playButton;
    private javax.swing.JPanel playPanel;
    private javax.swing.JButton removeButton;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JPanel startTimePanel;
    private javax.swing.JScrollPane tableScrollPanel;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables

    

    @Override
    public void mouseClicked(MouseEvent e) {
        if (e.getClickCount()!=2) return;
        int row = maskTable.getRowSorter().convertRowIndexToModel(maskTable.getSelectedRow());
        //int row = maskTable.getSelectedRow();
        if (row<0) return;
        Timepoint maskTimeStartPoint = (Timepoint)tableModel.getValueAt(row, 0);
        Timepoint maskTimeEndPoint = (Timepoint)tableModel.getValueAt(row, 1);
        applicationControl.setMaskTimepoints(maskTimeStartPoint, maskTimeEndPoint);                
        //applicationControl.detachSelection();
        applicationControl.playSelection();
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    public MaskTableModel getModel() {
        return tableModel;
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        boolean rowSelected = (maskTable.getSelectedRow()>=0);
        decreaseStartButton.setEnabled(rowSelected);
        increaseStartButton.setEnabled(rowSelected);
        decreaseEndButton.setEnabled(rowSelected);
        increaseEndButton.setEnabled(rowSelected);
        playButton.setEnabled(rowSelected);
    }



}
