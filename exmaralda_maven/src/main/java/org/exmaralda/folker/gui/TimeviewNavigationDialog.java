/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TimeviewNavigationDialog.java
 *
 * Created on 02.04.2009, 10:48:10
 */

package org.exmaralda.folker.gui;

import javax.swing.JOptionPane;
import org.exmaralda.folker.timeview.AbstractTimeProportionalViewer;
import org.exmaralda.folker.utilities.FOLKERInternationalizer;
import org.exmaralda.folker.utilities.TimeStringFormatter;

/**
 *
 * @author thomas
 */
public class TimeviewNavigationDialog extends javax.swing.JDialog {


    AbstractTimeProportionalViewer timeViewer;

    /** Creates new form TimeviewNavigationDialog */
    public TimeviewNavigationDialog(java.awt.Frame parent, boolean modal, AbstractTimeProportionalViewer tv) {
        super(parent, modal);
        initComponents();
        timeViewer = tv;
    }

    public void configureForFolker(){
        applyButton.setText(FOLKERInternationalizer.getString("dialog.navigation.apply"));
        closeButton.setText(FOLKERInternationalizer.getString("dialog.navigation.close"));
        viewStartRadioButton.setText(FOLKERInternationalizer.getString("dialog.navigation.show"));
        viewEndRadioButton1.setText(FOLKERInternationalizer.getString("dialog.navigation.show"));
        viewCursorRadioButton.setText(FOLKERInternationalizer.getString("dialog.navigation.show"));
        ((javax.swing.border.TitledBorder)(startTimePanel.getBorder())).setTitle(FOLKERInternationalizer.getString("gui.start"));
        ((javax.swing.border.TitledBorder)(cursorTimePanel.getBorder())).setTitle(FOLKERInternationalizer.getString("gui.cursor"));
        ((javax.swing.border.TitledBorder)(endTimePanel.getBorder())).setTitle(FOLKERInternationalizer.getString("gui.end"));
        pack();
    }

    private void apply() {
        try {
            double start = TimeStringFormatter.parseString(startTimeTextField.getText());
            double end = TimeStringFormatter.parseString(endTimeTextField.getText());
            double cursor = TimeStringFormatter.parseString(cursorTimeTextField.getText());
            System.out.println(start + " " + end + " " + cursor);

            if ((start>=0) && (end>=0)){
                timeViewer.setSelectionInterval(start, end, false);
            } else {
                timeViewer.removeSelection();
            }
            if (cursor>=0){
                timeViewer.setCursorTime(cursor);
            }

            if (viewStartRadioButton.isSelected()){
                timeViewer.centerTime(start);
            } else if (viewEndRadioButton1.isSelected()){
                timeViewer.centerTime(end);
            } else if (viewCursorRadioButton.isSelected()){
                timeViewer.centerTime(cursor);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Syntax error");
            ex.printStackTrace();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewButtonGroup = new javax.swing.ButtonGroup();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        applyButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        centerPanel = new javax.swing.JPanel();
        startTimePanel = new javax.swing.JPanel();
        startTimeTextField = new org.exmaralda.folker.gui.TimeTextField();
        viewStartRadioButton = new javax.swing.JRadioButton();
        endTimePanel = new javax.swing.JPanel();
        endTimeTextField = new org.exmaralda.folker.gui.TimeTextField();
        viewEndRadioButton1 = new javax.swing.JRadioButton();
        cursorTimePanel = new javax.swing.JPanel();
        cursorTimeTextField = new org.exmaralda.folker.gui.TimeTextField();
        viewCursorRadioButton = new javax.swing.JRadioButton();

        setTitle("Navigation");

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(okButton);

        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(applyButton);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(closeButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        centerPanel.setLayout(new java.awt.GridLayout(3, 1));

        startTimePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Start"));

        startTimeTextField.setFont(new java.awt.Font("Tahoma", 0, 14));
        startTimeTextField.setMaximumSize(new java.awt.Dimension(100, 25));
        startTimeTextField.setMinimumSize(new java.awt.Dimension(100, 25));
        startTimeTextField.setPreferredSize(new java.awt.Dimension(100, 25));
        startTimePanel.add(startTimeTextField);

        viewButtonGroup.add(viewStartRadioButton);
        viewStartRadioButton.setSelected(true);
        viewStartRadioButton.setText("View");
        startTimePanel.add(viewStartRadioButton);

        centerPanel.add(startTimePanel);

        endTimePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("End"));

        endTimeTextField.setFont(new java.awt.Font("Tahoma", 0, 14));
        endTimeTextField.setMaximumSize(new java.awt.Dimension(100, 25));
        endTimeTextField.setMinimumSize(new java.awt.Dimension(100, 25));
        endTimeTextField.setPreferredSize(new java.awt.Dimension(100, 25));
        endTimePanel.add(endTimeTextField);

        viewButtonGroup.add(viewEndRadioButton1);
        viewEndRadioButton1.setText("View");
        endTimePanel.add(viewEndRadioButton1);

        centerPanel.add(endTimePanel);

        cursorTimePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Cursor"));

        cursorTimeTextField.setFont(new java.awt.Font("Tahoma", 0, 14));
        cursorTimeTextField.setMaximumSize(new java.awt.Dimension(100, 25));
        cursorTimeTextField.setMinimumSize(new java.awt.Dimension(100, 25));
        cursorTimeTextField.setPreferredSize(new java.awt.Dimension(100, 25));
        cursorTimePanel.add(cursorTimeTextField);

        viewButtonGroup.add(viewCursorRadioButton);
        viewCursorRadioButton.setText("View");
        cursorTimePanel.add(viewCursorRadioButton);

        centerPanel.add(cursorTimePanel);

        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        apply();
    }//GEN-LAST:event_applyButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        apply();
        setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TimeviewNavigationDialog dialog = new TimeviewNavigationDialog(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel cursorTimePanel;
    private javax.swing.JTextField cursorTimeTextField;
    private javax.swing.JPanel endTimePanel;
    private javax.swing.JTextField endTimeTextField;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel startTimePanel;
    private javax.swing.JTextField startTimeTextField;
    private javax.swing.ButtonGroup viewButtonGroup;
    private javax.swing.JRadioButton viewCursorRadioButton;
    private javax.swing.JRadioButton viewEndRadioButton1;
    private javax.swing.JRadioButton viewStartRadioButton;
    // End of variables declaration//GEN-END:variables

    public void updateTimes() {
        double start = timeViewer.getSelectionStartTime();
        double end = timeViewer.getSelectionEndTime();
        double cursor = timeViewer.getCursorTime();
        if (start>=0){
            startTimeTextField.setText(TimeStringFormatter.formatMiliseconds(start,2));
        } else {
            startTimeTextField.setText("");
        }
        if (end>=0){
            endTimeTextField.setText(TimeStringFormatter.formatMiliseconds(end ,2));
        } else {
            endTimeTextField.setText("");
        }
        if (cursor>=0){
            cursorTimeTextField.setText(TimeStringFormatter.formatMiliseconds(cursor,2));
        } else {
            cursorTimeTextField.setText("");
        }
    }

}
