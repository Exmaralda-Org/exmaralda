/*
 * ChooseCOMAAttributesPanel.java
 *
 * Created on 10. Januar 2007, 18:14
 */

package org.exmaralda.exakt.exmaraldaSearch.swing;


import java.util.*;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;

/**
 *
 * @author  thomas
 */
public class ChooseCOMAAttributesPanel extends javax.swing.JPanel implements javax.swing.event.ListSelectionListener {
    

    /** Creates new form ChooseCOMAAttributesPanel */
    public ChooseCOMAAttributesPanel(Set<String> speakerAttributes, 
                                     Set<String> communicationAttributes,
                                     Set<String> transcriptionAttributes, 
                                     List<String[]> selectedAttributes) {
        initComponents();
        initLists(speakerAttributes, communicationAttributes, transcriptionAttributes, selectedAttributes);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        unselectedPanel = new javax.swing.JPanel();
        speakerAttributesPanel = new javax.swing.JPanel();
        speakerAttributesScrollPane = new javax.swing.JScrollPane();
        speakerAttributesList = new javax.swing.JList();
        speakerAttributesButtonsPanel = new javax.swing.JPanel();
        addSpeakerAttributeButton = new javax.swing.JButton();
        communicationAttributesPanel = new javax.swing.JPanel();
        communicationAttributesScrollPane = new javax.swing.JScrollPane();
        communicationAttributesList = new javax.swing.JList();
        communicationAttributesButtonsPanel = new javax.swing.JPanel();
        addCommunicationAttributeButton = new javax.swing.JButton();
        transcriptionAttributesPanel = new javax.swing.JPanel();
        transcriptionAttributesScrollPane = new javax.swing.JScrollPane();
        transcriptionAttributesList = new javax.swing.JList();
        transcriptionAttributesButtonsPanel = new javax.swing.JPanel();
        addTranscriptionAttributeButton = new javax.swing.JButton();
        selectedPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        selectedAttributesScrollPane = new javax.swing.JScrollPane();
        selectedAttributesList = new javax.swing.JList();
        changeOrderButtonsPanel = new javax.swing.JPanel();
        removeSelectedAttributeButton = new javax.swing.JButton();
        moveUpButton = new javax.swing.JButton();
        moveDownButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(800, 600));
        setLayout(new java.awt.GridLayout(1, 2));

        unselectedPanel.setPreferredSize(new java.awt.Dimension(400, 480));
        unselectedPanel.setLayout(new java.awt.GridLayout(3, 1));

        speakerAttributesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Speaker"));
        speakerAttributesPanel.setLayout(new java.awt.BorderLayout());

        speakerAttributesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        speakerAttributesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                speakerAttributesListMouseClicked(evt);
            }
        });
        speakerAttributesScrollPane.setViewportView(speakerAttributesList);

        speakerAttributesPanel.add(speakerAttributesScrollPane, java.awt.BorderLayout.CENTER);

        speakerAttributesButtonsPanel.setLayout(new javax.swing.BoxLayout(speakerAttributesButtonsPanel, javax.swing.BoxLayout.Y_AXIS));

        addSpeakerAttributeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/exakt/exmaraldaSearch/swing/resources/list-add.png"))); // NOI18N
        addSpeakerAttributeButton.setToolTipText("Add the selected item(s)");
        addSpeakerAttributeButton.setMaximumSize(new java.awt.Dimension(49, 23));
        addSpeakerAttributeButton.setMinimumSize(new java.awt.Dimension(49, 23));
        addSpeakerAttributeButton.setPreferredSize(new java.awt.Dimension(49, 23));
        addSpeakerAttributeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSpeakerAttributeButtonActionPerformed(evt);
            }
        });
        speakerAttributesButtonsPanel.add(addSpeakerAttributeButton);

        speakerAttributesPanel.add(speakerAttributesButtonsPanel, java.awt.BorderLayout.EAST);

        unselectedPanel.add(speakerAttributesPanel);

        communicationAttributesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Communication"));
        communicationAttributesPanel.setLayout(new java.awt.BorderLayout());

        communicationAttributesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        communicationAttributesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                communicationAttributesListMouseClicked(evt);
            }
        });
        communicationAttributesScrollPane.setViewportView(communicationAttributesList);

        communicationAttributesPanel.add(communicationAttributesScrollPane, java.awt.BorderLayout.CENTER);

        communicationAttributesButtonsPanel.setLayout(new javax.swing.BoxLayout(communicationAttributesButtonsPanel, javax.swing.BoxLayout.Y_AXIS));

        addCommunicationAttributeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/exakt/exmaraldaSearch/swing/resources/list-add.png"))); // NOI18N
        addCommunicationAttributeButton.setToolTipText("Add the selected item(s)");
        addCommunicationAttributeButton.setMaximumSize(new java.awt.Dimension(49, 23));
        addCommunicationAttributeButton.setMinimumSize(new java.awt.Dimension(49, 23));
        addCommunicationAttributeButton.setPreferredSize(new java.awt.Dimension(49, 23));
        addCommunicationAttributeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCommunicationAttributeButtonActionPerformed(evt);
            }
        });
        communicationAttributesButtonsPanel.add(addCommunicationAttributeButton);

        communicationAttributesPanel.add(communicationAttributesButtonsPanel, java.awt.BorderLayout.EAST);

        unselectedPanel.add(communicationAttributesPanel);

        transcriptionAttributesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Transcription"));
        transcriptionAttributesPanel.setLayout(new java.awt.BorderLayout());

        transcriptionAttributesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        transcriptionAttributesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                transcriptionAttributesListMouseClicked(evt);
            }
        });
        transcriptionAttributesScrollPane.setViewportView(transcriptionAttributesList);

        transcriptionAttributesPanel.add(transcriptionAttributesScrollPane, java.awt.BorderLayout.CENTER);

        transcriptionAttributesButtonsPanel.setLayout(new javax.swing.BoxLayout(transcriptionAttributesButtonsPanel, javax.swing.BoxLayout.Y_AXIS));

        addTranscriptionAttributeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/exakt/exmaraldaSearch/swing/resources/list-add.png"))); // NOI18N
        addTranscriptionAttributeButton.setToolTipText("Add the selected item(s)");
        addTranscriptionAttributeButton.setMaximumSize(new java.awt.Dimension(49, 23));
        addTranscriptionAttributeButton.setMinimumSize(new java.awt.Dimension(49, 23));
        addTranscriptionAttributeButton.setPreferredSize(new java.awt.Dimension(49, 23));
        addTranscriptionAttributeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTranscriptionAttributeButtonActionPerformed(evt);
            }
        });
        transcriptionAttributesButtonsPanel.add(addTranscriptionAttributeButton);

        transcriptionAttributesPanel.add(transcriptionAttributesButtonsPanel, java.awt.BorderLayout.EAST);

        unselectedPanel.add(transcriptionAttributesPanel);

        add(unselectedPanel);

        selectedPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Selection"));
        selectedPanel.setPreferredSize(new java.awt.Dimension(400, 480));
        selectedPanel.setLayout(new javax.swing.BoxLayout(selectedPanel, javax.swing.BoxLayout.Y_AXIS));

        jPanel2.setPreferredSize(new java.awt.Dimension(200, 370));
        jPanel2.setLayout(new java.awt.BorderLayout());

        selectedAttributesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        selectedAttributesScrollPane.setViewportView(selectedAttributesList);

        jPanel2.add(selectedAttributesScrollPane, java.awt.BorderLayout.CENTER);

        selectedPanel.add(jPanel2);

        changeOrderButtonsPanel.setMaximumSize(new java.awt.Dimension(180, 50));
        changeOrderButtonsPanel.setMinimumSize(new java.awt.Dimension(180, 50));
        changeOrderButtonsPanel.setPreferredSize(new java.awt.Dimension(180, 50));

        removeSelectedAttributeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/exakt/exmaraldaSearch/swing/resources/list-remove.png"))); // NOI18N
        removeSelectedAttributeButton.setToolTipText("Remove selected attribute(s)");
        removeSelectedAttributeButton.setMaximumSize(new java.awt.Dimension(49, 23));
        removeSelectedAttributeButton.setMinimumSize(new java.awt.Dimension(49, 23));
        removeSelectedAttributeButton.setPreferredSize(new java.awt.Dimension(49, 23));
        removeSelectedAttributeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSelectedAttributeButtonActionPerformed(evt);
            }
        });
        changeOrderButtonsPanel.add(removeSelectedAttributeButton);

        moveUpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/exakt/exmaraldaSearch/swing/resources/go-up.png"))); // NOI18N
        moveUpButton.setToolTipText("Move attribute up");
        moveUpButton.setEnabled(false);
        moveUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpButtonActionPerformed(evt);
            }
        });
        changeOrderButtonsPanel.add(moveUpButton);

        moveDownButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/exakt/exmaraldaSearch/swing/resources/go-down.png"))); // NOI18N
        moveDownButton.setToolTipText("Move attribute down");
        moveDownButton.setEnabled(false);
        moveDownButton.setMaximumSize(new java.awt.Dimension(49, 23));
        moveDownButton.setMinimumSize(new java.awt.Dimension(49, 23));
        moveDownButton.setPreferredSize(new java.awt.Dimension(49, 23));
        moveDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownButtonActionPerformed(evt);
            }
        });
        changeOrderButtonsPanel.add(moveDownButton);

        selectedPanel.add(changeOrderButtonsPanel);

        add(selectedPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void transcriptionAttributesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_transcriptionAttributesListMouseClicked
    if(evt.getClickCount() == 2){
         int index = transcriptionAttributesList.locationToIndex(evt.getPoint());
         transcriptionAttributesList.setSelectedIndex(index);
         this.addTranscriptionAttributeButtonActionPerformed(null);
       }
    }//GEN-LAST:event_transcriptionAttributesListMouseClicked

    private void communicationAttributesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_communicationAttributesListMouseClicked
    if(evt.getClickCount() == 2){
         int index = communicationAttributesList.locationToIndex(evt.getPoint());
         communicationAttributesList.setSelectedIndex(index);
         this.addCommunicationAttributeButtonActionPerformed(null);
       }
    }//GEN-LAST:event_communicationAttributesListMouseClicked

    private void speakerAttributesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_speakerAttributesListMouseClicked
      if(evt.getClickCount() == 2){
         int index = speakerAttributesList.locationToIndex(evt.getPoint());
         speakerAttributesList.setSelectedIndex(index);
         this.addSpeakerAttributeButtonActionPerformed(null);
       }
    }//GEN-LAST:event_speakerAttributesListMouseClicked

    private void moveDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownButtonActionPerformed
        int index = selectedAttributesList.getSelectedIndex();
        DefaultListModel model = ((DefaultListModel)(selectedAttributesList.getModel()));
        if (index>=model.getSize()-1) return;
        Object o = model.getElementAt(index);
        model.removeElement(o);
        model.insertElementAt(o,index+1);      
        selectedAttributesList.setSelectedIndex(index+1);
    }//GEN-LAST:event_moveDownButtonActionPerformed

    private void moveUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpButtonActionPerformed
// TODO add your handling code here:
        int index = selectedAttributesList.getSelectedIndex();
        if (index<1) return;
        DefaultListModel model = ((DefaultListModel)(selectedAttributesList.getModel()));
        Object o = model.getElementAt(index);
        model.removeElement(o);
        model.insertElementAt(o,index-1);      
        selectedAttributesList.setSelectedIndex(index-1);
    }//GEN-LAST:event_moveUpButtonActionPerformed

    private void removeSelectedAttributeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSelectedAttributeButtonActionPerformed
        Object[] selectedValues = selectedAttributesList.getSelectedValues();
        for (Object o : selectedValues){
            String s = (String)o;
            String attributeName = s.substring(0, s.length()-3);
            char attributeType = s.charAt(s.length()-2);
            switch (attributeType){
                case 'S' : ((DefaultListModel)(speakerAttributesList.getModel())).addElement(attributeName); break;
                case 'C' : ((DefaultListModel)(communicationAttributesList.getModel())).addElement(attributeName); break;
                case 'T' : ((DefaultListModel)(transcriptionAttributesList.getModel())).addElement(attributeName); break;
            }
            ((DefaultListModel)(selectedAttributesList.getModel())).removeElement(s);
        }
    }//GEN-LAST:event_removeSelectedAttributeButtonActionPerformed

    private void addTranscriptionAttributeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTranscriptionAttributeButtonActionPerformed
        Object[] selectedValues = transcriptionAttributesList.getSelectedValues();
        for (Object o : selectedValues){
            String attributeName = (String)o;
            ((DefaultListModel)(selectedAttributesList.getModel())).addElement(attributeName + "[T]");
            ((DefaultListModel)(transcriptionAttributesList.getModel())).removeElement(attributeName);
        }
    }//GEN-LAST:event_addTranscriptionAttributeButtonActionPerformed

    private void addCommunicationAttributeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCommunicationAttributeButtonActionPerformed
        Object[] selectedValues = communicationAttributesList.getSelectedValues();
        for (Object o : selectedValues){
            String attributeName = (String)o;
            ((DefaultListModel)(selectedAttributesList.getModel())).addElement(attributeName + "[C]");
            ((DefaultListModel)(communicationAttributesList.getModel())).removeElement(attributeName);
        }
    }//GEN-LAST:event_addCommunicationAttributeButtonActionPerformed

    private void addSpeakerAttributeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSpeakerAttributeButtonActionPerformed
        Object[] selectedValues = speakerAttributesList.getSelectedValues();
        for (Object o : selectedValues){
            String attributeName = (String)o;
            ((DefaultListModel)(selectedAttributesList.getModel())).addElement(attributeName + "[S]");
            ((DefaultListModel)(speakerAttributesList.getModel())).removeElement(attributeName);
        }        
    }//GEN-LAST:event_addSpeakerAttributeButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCommunicationAttributeButton;
    private javax.swing.JButton addSpeakerAttributeButton;
    private javax.swing.JButton addTranscriptionAttributeButton;
    private javax.swing.JPanel changeOrderButtonsPanel;
    private javax.swing.JPanel communicationAttributesButtonsPanel;
    private javax.swing.JList communicationAttributesList;
    private javax.swing.JPanel communicationAttributesPanel;
    private javax.swing.JScrollPane communicationAttributesScrollPane;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton moveDownButton;
    private javax.swing.JButton moveUpButton;
    private javax.swing.JButton removeSelectedAttributeButton;
    private javax.swing.JList selectedAttributesList;
    private javax.swing.JScrollPane selectedAttributesScrollPane;
    private javax.swing.JPanel selectedPanel;
    private javax.swing.JPanel speakerAttributesButtonsPanel;
    private javax.swing.JList speakerAttributesList;
    private javax.swing.JPanel speakerAttributesPanel;
    private javax.swing.JScrollPane speakerAttributesScrollPane;
    private javax.swing.JPanel transcriptionAttributesButtonsPanel;
    private javax.swing.JList transcriptionAttributesList;
    private javax.swing.JPanel transcriptionAttributesPanel;
    private javax.swing.JScrollPane transcriptionAttributesScrollPane;
    private javax.swing.JPanel unselectedPanel;
    // End of variables declaration//GEN-END:variables
    

    private void initLists(Set<String> speakerAttributes, 
                           Set<String> communicationAttributes,
                           Set<String> transcriptionAttributes, 
                           List<String[]> selectedAttributes){
        
        HashSet<String> sel = new HashSet<>();
        for (String[] s : selectedAttributes){
            sel.add(s[1] + "[" + s[0] + "]");
        }        

        initUnselected(speakerAttributes, speakerAttributesList, sel, "S");
        initUnselected(communicationAttributes, communicationAttributesList,  sel, "C");
        initUnselected(transcriptionAttributes, transcriptionAttributesList,  sel, "T");
        
        DefaultListModel selectedAttributesListModel = new DefaultListModel();
        for(String[] s : selectedAttributes){
            selectedAttributesListModel.addElement(s[1] + "[" + s[0] + "]");
        }
        selectedAttributesList.setModel(selectedAttributesListModel);
        selectedAttributesList.addListSelectionListener(this);
    }
    
     private void initUnselected(Set<String> attributes, 
                                JList list,                                 
                                HashSet<String> selected, 
                                String type){
        Vector<String> v = new Vector();
        v.addAll(attributes);
        Collections.sort(v);
        DefaultListModel listModel = new DefaultListModel();
        for(String a : v){
            if (!selected.contains(a + "[" + type + "]")){
                listModel.addElement(a);            
            }
        }
        list.setModel(listModel);        
    }

    public void valueChanged(ListSelectionEvent e) {
        if (e.getValueIsAdjusting()) return;
        boolean onlyOneIsSelected = ((JList)(e.getSource())).getSelectedIndices().length==1;
        moveUpButton.setEnabled(onlyOneIsSelected);
        moveDownButton.setEnabled(onlyOneIsSelected);
    }
    
    public Vector<String[]> getSelectedAttributes(){
        Vector<String[]> retValue = new Vector<String[]>();
        DefaultListModel model = ((DefaultListModel)(selectedAttributesList.getModel()));
        for (int i=0; i<model.size(); i++){
            String s = (String)(model.getElementAt(i));
            String attributeName = s.substring(0, s.length()-3);
            String attributeType = s.substring(s.length()-2, s.length()-1);
            String[] value = {attributeType,attributeName};
            retValue.add(value);
        }
        return retValue;
    }

}
