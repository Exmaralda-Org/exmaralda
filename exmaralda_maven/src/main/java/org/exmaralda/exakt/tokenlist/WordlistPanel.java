/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WordlistPanel.java
 *
 * Created on 29.03.2010, 15:44:38
 */

package org.exmaralda.exakt.tokenlist;

import java.awt.Component;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.util.Enumeration;
import java.util.List;
import java.util.Vector;
import java.util.prefs.Preferences;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableCellRenderer;
import org.exmaralda.common.helpers.LevenshteinComparator;
import org.exmaralda.exakt.exmaraldaSearch.COMACorpusInterface;
import org.exmaralda.exakt.search.swing.RegularExpressionTextField;
import org.exmaralda.partitureditor.jexmaraldaswing.fileFilters.ParameterFileFilter;


/**
 *
 * @author thomas
 */
public class WordlistPanel extends javax.swing.JPanel implements MouseListener {


    TokenListTableModel model;
    TokenListTableRowSorter sorter;
    DefaultListModel selectionListModel = new DefaultListModel();
    AbstractTokenList tokenList;


    /** Creates new form WordlistPanel */
    public WordlistPanel() {
        initComponents();
    }

    public void setWordList(AbstractTokenList tl){
        tokenList = tl;
        model = new TokenListTableModel(tl);
        tokenTable.setModel(model);
        selectionList.setModel(selectionListModel);
        tokenTable.addMouseListener(this);
        selectionList.addMouseListener(this);
        formatTable();
        updateCount();
    }
    
    void updateCount(){
        int types = tokenList.getNumberOfTokens();
        int tokens = tokenList.getTotalTokenCount();
        int filteredTypes = sorter.getViewRowCount();
        int filteredTokens = 0;
        for (int pos=0; pos<model.getRowCount(); pos++){
            int index = sorter.convertRowIndexToView(pos);
            if (index>=0){
                // i.e. the row is not filtered
                int thisTokenCount = model.tokenList.getTokenCount(model.theTokens.get(pos));
                filteredTokens+=thisTokenCount;
            }
        }
        String countString = "Types: " + Integer.toString(types) + " (" + Integer.toString(filteredTypes) 
                            + ") / Tokens: " + Integer.toString(tokens) + " (" + Integer.toString(filteredTokens) + ")";
        
        countLabel.setText(countString);
        
                
        
    }

    void levenshtein(int distance){
        List<String> list1 = new Vector<String>();
        Enumeration e = selectionListModel.elements();
        while (e.hasMoreElements()){
            String s = (String)(e.nextElement());
            list1.add(s);
        }
        List<String> list2 = model.theTokens;
        List<String> resultList = LevenshteinComparator.getNeighbours(list1, list2, distance);
        for (String s : resultList){
            selectionListModel.addElement(s);
        }
    }


    void formatTable(){
        //System.out.println("Do da format");
        tokenTable.getColumnModel().getColumn(0).setPreferredWidth(280);
        tokenTable.getColumnModel().getColumn(0).setHeaderValue("Word");
        tokenTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        tokenTable.getColumnModel().getColumn(1).setHeaderValue("Frequency");
        sorter = new TokenListTableRowSorter(model);
        tokenTable.setRowSorter(sorter);
        
        // Added 28-05-2014
        Preferences prefs = java.util.prefs.Preferences.userRoot().node("org.sfb538.exmaralda.EXAKT");
        String fontName = prefs.get("kwic-table-font-name","Times New Roman");
        int fontSize = prefs.getInt("kwic-table-font-size", 10);
        final java.awt.Font font = new java.awt.Font(fontName, java.awt.Font.PLAIN, fontSize);        
        tokenTable.getColumnModel().getColumn(0).setCellRenderer(new DefaultTableCellRenderer(){
            
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                c.setFont(font);
                return c;
            }
            
        });
        
        // new 05-12-2022
        for (int i=0; i<tokenTable.getRowCount(); i++){
            tokenTable.setRowHeight(i, fontSize+2);        
        }
        
        selectionList.setFont(font);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tablePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tokenTable = new javax.swing.JTable();
        savePanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        upperPanel = new javax.swing.JPanel();
        tableFilterPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        filterTextField = new RegularExpressionTextField();
        filterButton = new javax.swing.JButton();
        removeFilterButton = new javax.swing.JButton();
        countPanel = new javax.swing.JPanel();
        countLabel = new javax.swing.JLabel();
        selectionPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectionList = new javax.swing.JList();
        selectionButtonPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        copyPanel = new javax.swing.JPanel();
        copyRegexButton = new javax.swing.JButton();
        copyXPathButton = new javax.swing.JButton();
        levenshteinPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lev1Button = new javax.swing.JButton();
        lev2Button = new javax.swing.JButton();
        lev3Button = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        tablePanel.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(402, 402));

        tokenTable.setAutoCreateRowSorter(true);
        tokenTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tokenTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(tokenTable);

        tablePanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/exakt/exmaraldaSearch/swing/resources/Save.gif"))); // NOI18N
        saveButton.setText("Save wordlist...");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        savePanel.add(saveButton);

        tablePanel.add(savePanel, java.awt.BorderLayout.PAGE_END);

        upperPanel.setLayout(new java.awt.BorderLayout());

        tableFilterPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Filter: ");
        tableFilterPanel.add(jLabel1);

        filterTextField.setMinimumSize(new java.awt.Dimension(200, 20));
        filterTextField.setPreferredSize(new java.awt.Dimension(200, 20));
        filterTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterTextFieldActionPerformed(evt);
            }
        });
        tableFilterPanel.add(filterTextField);

        filterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/exakt/exmaraldaSearch/swing/resources/Filter.gif"))); // NOI18N
        filterButton.setToolTipText("Apply filter");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });
        tableFilterPanel.add(filterButton);

        removeFilterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/exakt/exmaraldaSearch/swing/resources/Close.gif"))); // NOI18N
        removeFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFilterButtonActionPerformed(evt);
            }
        });
        tableFilterPanel.add(removeFilterButton);

        upperPanel.add(tableFilterPanel, java.awt.BorderLayout.PAGE_START);

        countLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        countLabel.setForeground(java.awt.SystemColor.desktop);
        countLabel.setText("jLabel2");
        countPanel.add(countLabel);

        upperPanel.add(countPanel, java.awt.BorderLayout.SOUTH);

        tablePanel.add(upperPanel, java.awt.BorderLayout.NORTH);

        add(tablePanel, java.awt.BorderLayout.WEST);

        selectionPanel.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Selection"));
        jScrollPane2.setMaximumSize(new java.awt.Dimension(300, 400));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(150, 200));

        jScrollPane2.setViewportView(selectionList);

        selectionPanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        selectionButtonPanel.setLayout(new javax.swing.BoxLayout(selectionButtonPanel, javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/exakt/exmaraldaSearch/swing/resources/list-add.png"))); // NOI18N
        addButton.setToolTipText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addButton);

        removeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/exakt/exmaraldaSearch/swing/resources/list-remove.png"))); // NOI18N
        removeButton.setToolTipText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        jPanel1.add(removeButton);

        selectionButtonPanel.add(jPanel1);

        selectionPanel.add(selectionButtonPanel, java.awt.BorderLayout.WEST);

        copyRegexButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/exakt/exmaraldaSearch/swing/resources/Copy.gif"))); // NOI18N
        copyRegexButton.setText("Regex");
        copyRegexButton.setToolTipText("Copy Regular Expression for the selection");
        copyRegexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyRegexButtonActionPerformed(evt);
            }
        });
        copyPanel.add(copyRegexButton);

        copyXPathButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/exakt/exmaraldaSearch/swing/resources/Copy.gif"))); // NOI18N
        copyXPathButton.setText("XPath");
        copyXPathButton.setToolTipText("Copy XPath search expression for the selection");
        copyXPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyXPathButtonActionPerformed(evt);
            }
        });
        copyPanel.add(copyXPathButton);

        selectionPanel.add(copyPanel, java.awt.BorderLayout.SOUTH);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Levenshtein: ");
        levenshteinPanel.add(jLabel2);

        lev1Button.setText("\u2264 1");
        lev1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lev1ButtonActionPerformed(evt);
            }
        });
        levenshteinPanel.add(lev1Button);

        lev2Button.setText("\u2264 2");
        lev2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lev2ButtonActionPerformed(evt);
            }
        });
        levenshteinPanel.add(lev2Button);

        lev3Button.setText("\u2264 3");
        lev3Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lev3ButtonActionPerformed(evt);
            }
        });
        levenshteinPanel.add(lev3Button);

        selectionPanel.add(levenshteinPanel, java.awt.BorderLayout.PAGE_START);

        add(selectionPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
       filter();
    }//GEN-LAST:event_filterButtonActionPerformed

    private void filterTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterTextFieldActionPerformed
        filter();
    }//GEN-LAST:event_filterTextFieldActionPerformed

    private void removeFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFilterButtonActionPerformed
        removeFilter();
    }//GEN-LAST:event_removeFilterButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        addToken();
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
       removeToken();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void copyRegexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyRegexButtonActionPerformed
       String regex = "\\b(";
        for (int pos=0; pos<selectionListModel.getSize(); pos++){
           String token = (String) selectionListModel.elementAt(pos);
           regex+=Pattern.quote(token);
           if (pos<selectionListModel.getSize()-1){
               regex+="|";
           }
       }
       regex+=")\\b";
       java.awt.datatransfer.StringSelection ss = new java.awt.datatransfer.StringSelection(regex);
       this.getToolkit().getSystemClipboard().setContents(ss,ss);
       JOptionPane.showMessageDialog(this, "Regular expression copied to clipboard");
    }//GEN-LAST:event_copyRegexButtonActionPerformed

    private void copyXPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyXPathButtonActionPerformed
       String xpath = "//ts[@n='" + ((COMACorpusInterface) (model.getTokenList().getCorpus())).getWordSegmentName() + "' and (";
        for (int pos=0; pos<selectionListModel.getSize(); pos++){
           String token = (String) selectionListModel.elementAt(pos);
           xpath+="text()='" + token + "'";
           if (pos<selectionListModel.getSize()-1){
               xpath+=" or ";
           }
       }
       xpath+=")]";
       java.awt.datatransfer.StringSelection ss = new java.awt.datatransfer.StringSelection(xpath);
       this.getToolkit().getSystemClipboard().setContents(ss,ss);
       JOptionPane.showMessageDialog(this, "XPath copied to clipboard");
    }//GEN-LAST:event_copyXPathButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        ParameterFileFilter htmlFF = new ParameterFileFilter("html", "HTML file, alphabetically sorted (*.html)");
        ParameterFileFilter htmlFF2 = new ParameterFileFilter("html", "HTML file, frequency sorted (*.html)");
        ParameterFileFilter textFF = new ParameterFileFilter("txt", "Tab separated text (*.txt)");
        JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Save word list");
        fc.addChoosableFileFilter(textFF);
        fc.addChoosableFileFilter(htmlFF2);
        fc.addChoosableFileFilter(htmlFF);
        int value=fc.showSaveDialog(this);
        if (value==fc.APPROVE_OPTION){
            FileFilter ff = fc.getFileFilter();
            File file = fc.getSelectedFile();
            if ((ff==htmlFF || ff==htmlFF2) && (file.getName().indexOf(".")<0)){
                file = new File(file.getAbsolutePath()+".html");
            }
            if ((ff==textFF) && (file.getName().indexOf(".")<0)){
                file = new File(file.getAbsolutePath()+".txt");
            }
            boolean goon = true;
            if (file.exists()){
                int option = JOptionPane.showConfirmDialog(this, "File \n" + file.getAbsolutePath() + "\nexists. Overwrite?", "Confirm overwrite", JOptionPane.YES_NO_OPTION);
                if (option==JOptionPane.NO_OPTION) goon = false;
            }
            if (!goon) return;
            try {
                if (ff==htmlFF){
                    IOUtilities.writeHTML(model.getTokenList(), file);
                } else if (ff==htmlFF2){
                    IOUtilities.writeHTML(model.getTokenList(), file, AbstractTokenList.FREQUENCY_SORTED);
                } else {
                    IOUtilities.writeText(model.getTokenList(), file);
                }
            } catch (Exception e){
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void lev1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lev1ButtonActionPerformed
        levenshtein(1);
    }//GEN-LAST:event_lev1ButtonActionPerformed

    private void lev2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lev2ButtonActionPerformed
        levenshtein(2);
    }//GEN-LAST:event_lev2ButtonActionPerformed

    private void lev3ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lev3ButtonActionPerformed
        levenshtein(3);
    }//GEN-LAST:event_lev3ButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel copyPanel;
    private javax.swing.JButton copyRegexButton;
    private javax.swing.JButton copyXPathButton;
    private javax.swing.JLabel countLabel;
    private javax.swing.JPanel countPanel;
    private javax.swing.JButton filterButton;
    private javax.swing.JTextField filterTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton lev1Button;
    private javax.swing.JButton lev2Button;
    private javax.swing.JButton lev3Button;
    private javax.swing.JPanel levenshteinPanel;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton removeFilterButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel savePanel;
    private javax.swing.JPanel selectionButtonPanel;
    private javax.swing.JList selectionList;
    private javax.swing.JPanel selectionPanel;
    private javax.swing.JPanel tableFilterPanel;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JTable tokenTable;
    private javax.swing.JPanel upperPanel;
    // End of variables declaration//GEN-END:variables

    void filter(){
        String filterExpression = filterTextField.getText();
        try {
            Pattern.compile(filterExpression);
            sorter.setRowFilter(new TokenListTableRowFilter(filterExpression));
            updateCount();
        } catch (PatternSyntaxException pse){
            JOptionPane.showMessageDialog(this, "Pattern Syntax Exception:\n" + pse.getLocalizedMessage());
            pse.printStackTrace();
        }
    }
    
    void removeFilter(){
        sorter.setRowFilter(new TokenListTableRowFilter(".*"));
        updateCount();
    }

    void addToken(){
        for (int row : tokenTable.getSelectedRows()){
            String token = (String) tokenTable.getValueAt(row, 0);
            if (!selectionListModel.contains(token)){
                selectionListModel.addElement(tokenTable.getValueAt(row, 0));
            }
        }
    }

    void removeToken(){
        for (Object o : selectionList.getSelectedValues()){
            selectionListModel.removeElement(o);
        }
    }

    public void mouseClicked(MouseEvent e) {
        if (e.getClickCount()==2){
            if (e.getSource()==tokenTable){
                addToken();
            }
            if (e.getSource()==selectionList){
                removeToken();
            }
        }
    }

    public void mousePressed(MouseEvent e) {
    }

    public void mouseReleased(MouseEvent e) {
    }

    public void mouseEntered(MouseEvent e) {
    }

    public void mouseExited(MouseEvent e) {
    }

}

