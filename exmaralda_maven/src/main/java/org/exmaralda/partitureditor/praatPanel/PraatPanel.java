/*
 * PraatPanel.java
 *
 * Created on 14. Mai 2004, 13:24
 */

package org.exmaralda.partitureditor.praatPanel;

import java.io.*;

/**
 *
 * @author  thomas
 */
public class PraatPanel extends javax.swing.JDialog {
    
    javax.swing.event.EventListenerList listenerList = new javax.swing.event.EventListenerList();
    static final String NL = System.getProperty("line.separator");
    public PraatControl praatControl = new PraatControl();
    boolean synchronize = false;
    String audioFilename = "";
    double startTime = 0;
    double endTime = 0;
        
    /** Creates new form PraatPanel
     * @param parent
     * @param modal */
    public PraatPanel(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        org.exmaralda.common.helpers.Internationalizer.internationalizeDialogToolTips(this);
    }
    
  
    public void addPraatPanelListener(PraatPanelListener l) {
         listenerList.add(PraatPanelListener.class, l);
    }

    public void setStartAndEndTime(double s, double e){
        startLabel.setText(Double.toString(Math.floor(s*100)/100));
        startTime = s;
        endLabel.setText(Double.toString(Math.ceil(e*100)/100));
        endTime = e;
        if (synchronize){
            this.setButtonActionPerformed(null);
        }
    }
    
    public void setAudioFilename(String filename){
        audioFilename = filename;
        message("Audio file: " + filename + ".");
    }
    
    public javax.swing.JButton getGetButton(){
        return this.getButton;
    }
    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonsPanel = new javax.swing.JPanel();
        startPraatButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        setButton = new javax.swing.JButton();
        getButton = new javax.swing.JButton();
        messagesPanel = new javax.swing.JPanel();
        messagesScrollPane = new javax.swing.JScrollPane();
        messagesTextArea = new javax.swing.JTextArea();
        bottomPanel = new javax.swing.JPanel();
        synchronizePanel = new javax.swing.JPanel();
        synchronizeCheckBox = new javax.swing.JCheckBox();
        timesPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        startLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        endLabel = new javax.swing.JLabel();

        setTitle("Praat panel");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        startPraatButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/Praat.gif"))); // NOI18N
        startPraatButton.setToolTipText("Start Praat");
        startPraatButton.setMaximumSize(new java.awt.Dimension(30, 30));
        startPraatButton.setMinimumSize(new java.awt.Dimension(30, 30));
        startPraatButton.setPreferredSize(new java.awt.Dimension(30, 30));
        startPraatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startPraatButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(startPraatButton);

        loadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/Reformat.gif"))); // NOI18N
        loadButton.setToolTipText("(Re)load audio file in Praat");
        loadButton.setMaximumSize(new java.awt.Dimension(30, 30));
        loadButton.setMinimumSize(new java.awt.Dimension(30, 30));
        loadButton.setPreferredSize(new java.awt.Dimension(30, 30));
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(loadButton);

        setButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/Set.gif"))); // NOI18N
        setButton.setToolTipText("Set start and end time in Praat");
        setButton.setMaximumSize(new java.awt.Dimension(30, 30));
        setButton.setMinimumSize(new java.awt.Dimension(30, 30));
        setButton.setPreferredSize(new java.awt.Dimension(30, 30));
        setButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(setButton);

        getButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/Get.gif"))); // NOI18N
        getButton.setToolTipText("Get start- and end time from Praat");
        getButton.setMaximumSize(new java.awt.Dimension(30, 30));
        getButton.setMinimumSize(new java.awt.Dimension(30, 30));
        getButton.setPreferredSize(new java.awt.Dimension(30, 30));
        getButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(getButton);

        getContentPane().add(buttonsPanel, java.awt.BorderLayout.NORTH);

        messagesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Messages"));
        messagesPanel.setToolTipText("Nachrichten und Fehlermeldungen");
        messagesPanel.setLayout(new javax.swing.BoxLayout(messagesPanel, javax.swing.BoxLayout.LINE_AXIS));

        messagesScrollPane.setMaximumSize(new java.awt.Dimension(300, 200));
        messagesScrollPane.setMinimumSize(new java.awt.Dimension(100, 50));
        messagesScrollPane.setPreferredSize(new java.awt.Dimension(200, 100));

        messagesTextArea.setBackground(new java.awt.Color(0, 0, 0));
        messagesTextArea.setEditable(false);
        messagesTextArea.setFont(new java.awt.Font("DialogInput", 0, 10));
        messagesTextArea.setForeground(new java.awt.Color(0, 204, 102));
        messagesScrollPane.setViewportView(messagesTextArea);

        messagesPanel.add(messagesScrollPane);

        getContentPane().add(messagesPanel, java.awt.BorderLayout.CENTER);

        bottomPanel.setLayout(new javax.swing.BoxLayout(bottomPanel, javax.swing.BoxLayout.Y_AXIS));

        synchronizePanel.setLayout(new javax.swing.BoxLayout(synchronizePanel, javax.swing.BoxLayout.LINE_AXIS));

        synchronizeCheckBox.setText("Synchronize");
        synchronizeCheckBox.setToolTipText("Synchronize with selection");
        synchronizeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                synchronizeCheckBoxActionPerformed(evt);
            }
        });
        synchronizePanel.add(synchronizeCheckBox);

        bottomPanel.add(synchronizePanel);

        timesPanel.setLayout(new javax.swing.BoxLayout(timesPanel, javax.swing.BoxLayout.LINE_AXIS));

        jLabel2.setText("Start: ");
        jLabel2.setToolTipText("Startzeit");
        timesPanel.add(jLabel2);

        startLabel.setForeground(new java.awt.Color(102, 153, 255));
        startLabel.setText("0.0");
        timesPanel.add(startLabel);

        jLabel4.setText(" End: ");
        jLabel4.setToolTipText("Endzeit");
        timesPanel.add(jLabel4);

        endLabel.setForeground(new java.awt.Color(102, 153, 255));
        endLabel.setText("10.5");
        timesPanel.add(endLabel);

        bottomPanel.add(timesPanel);

        getContentPane().add(bottomPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getButtonActionPerformed
        // Add your handling code here:
        try {
            double cursorTime = praatControl.getCursorTime();
            message("Got cursor time: " + Double.toString(cursorTime));
            this.fireCursorTime(cursorTime);
        } catch (IOException ioe){                
            message("Could not get cursor time.");
            message(ioe.getLocalizedMessage());
        }
            
    }//GEN-LAST:event_getButtonActionPerformed

    private void synchronizeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_synchronizeCheckBoxActionPerformed
        // Add your handling code here:
        synchronize = synchronizeCheckBox.isSelected();
        setButton.setEnabled(!synchronize);
    }//GEN-LAST:event_synchronizeCheckBoxActionPerformed

    private void setButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setButtonActionPerformed
        // Add your handling code here:
        try {
            praatControl.selectSound(startTime, endTime);
            message("Start set:" + startTime);
            message("End set:" + endTime);
        } catch (IOException ioe){                
            message("Could not set start and end time.");
            message(ioe.getLocalizedMessage());
        }
    }//GEN-LAST:event_setButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        // Add your handling code here:
        try {
            praatControl.openSoundFile(audioFilename);
            message("Audio file loaded.");
        } catch (IOException ioe){                
            message("Could not load audio file.");
            message(ioe.getLocalizedMessage());
        }

    }//GEN-LAST:event_loadButtonActionPerformed

    private void startPraatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startPraatButtonActionPerformed
        // Add your handling code here:
        try{
            praatControl.startPraat();
            message("Praat started.");
            javax.swing.JOptionPane.showMessageDialog(this, 
                                                      "Press OK when Praat is up and running.", 
                                                      "Starting Praat",
                                                      javax.swing.JOptionPane.WARNING_MESSAGE);
        } catch (IOException ioe){
            message("Could not start Praat.");
            message(ioe.getLocalizedMessage());
        }        
    }//GEN-LAST:event_startPraatButtonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new PraatPanel(new javax.swing.JFrame(), true).show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JLabel endLabel;
    private javax.swing.JButton getButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton loadButton;
    private javax.swing.JPanel messagesPanel;
    private javax.swing.JScrollPane messagesScrollPane;
    private javax.swing.JTextArea messagesTextArea;
    private javax.swing.JButton setButton;
    private javax.swing.JLabel startLabel;
    private javax.swing.JButton startPraatButton;
    private javax.swing.JCheckBox synchronizeCheckBox;
    private javax.swing.JPanel synchronizePanel;
    private javax.swing.JPanel timesPanel;
    // End of variables declaration//GEN-END:variables

    private void message(String m){
        messagesTextArea.append(m + NL);
        messagesTextArea.setCaretPosition(messagesTextArea.getText().length()-1);
    }
    
    protected void fireCursorTime(double time) {
         // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
             if (listeners[i]==PraatPanelListener.class) {
                PraatPanelEvent event = new PraatPanelEvent(time);
                ((PraatPanelListener)listeners[i+1]).processTime(event);             
            }
         }
    }
    
}
