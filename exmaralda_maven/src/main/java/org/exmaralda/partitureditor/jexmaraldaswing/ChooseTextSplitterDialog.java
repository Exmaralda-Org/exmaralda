/*
 * ChooseTextSplitterDialog.java
 *
 * Created on 8. Juni 2007, 09:31
 */

package org.exmaralda.partitureditor.jexmaraldaswing;

import java.util.regex.*;
import javax.swing.event.*;

/**
 *
 * @author  thomas
 */
public class ChooseTextSplitterDialog extends javax.swing.JDialog implements DocumentListener {
    
    String WORD_SPLITTER = "[^\\p{L}]+";
    
    /** Creates new form ChooseTextSplitterDialog */
    public ChooseTextSplitterDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        java.awt.Dimension dialogSize = this.getPreferredSize();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(screenSize.width/2 - dialogSize.width/2, screenSize.height/2 - dialogSize.height/2);        
        regexTextField.getDocument().addDocumentListener(this);
    }
    
    public String getRegex(){
        if (paragraphButton.isSelected()) return "";
        if (wordButton.isSelected()) return WORD_SPLITTER;
        return regexTextField.getText();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        buttonGroup = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        chooserPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        paragraphButton = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        wordButton = new javax.swing.JRadioButton();
        regexPanel = new javax.swing.JPanel();
        regexButton = new javax.swing.JRadioButton();
        regexTextField = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Choose a text splitter");
        setResizable(false);
        mainPanel.setLayout(new java.awt.BorderLayout());

        chooserPanel.setLayout(new java.awt.GridLayout(3, 1));

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.X_AXIS));

        buttonGroup.add(paragraphButton);
        paragraphButton.setSelected(true);
        paragraphButton.setText("Split at paragraphs");
        paragraphButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        paragraphButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel1.add(paragraphButton);

        chooserPanel.add(jPanel1);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.X_AXIS));

        buttonGroup.add(wordButton);
        wordButton.setText("Split at non-word characters");
        wordButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        wordButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel2.add(wordButton);

        chooserPanel.add(jPanel2);

        regexPanel.setLayout(new javax.swing.BoxLayout(regexPanel, javax.swing.BoxLayout.X_AXIS));

        buttonGroup.add(regexButton);
        regexButton.setText("Split at regular expression: ");
        regexButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        regexButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        regexPanel.add(regexButton);

        regexTextField.setMaximumSize(new java.awt.Dimension(3000, 19));
        regexTextField.setMinimumSize(new java.awt.Dimension(100, 19));
        regexTextField.setPreferredSize(new java.awt.Dimension(300, 19));
        regexTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                regexTextFieldFocusGained(evt);
            }
        });

        regexPanel.add(regexTextField);

        chooserPanel.add(regexPanel);

        mainPanel.add(chooserPanel, java.awt.BorderLayout.CENTER);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(okButton);

        mainPanel.add(buttonPanel, java.awt.BorderLayout.SOUTH);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void regexTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_regexTextFieldFocusGained
        regexButton.setSelected(true);
    }//GEN-LAST:event_regexTextFieldFocusGained

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        setVisible (false);
        dispose ();                         
    }//GEN-LAST:event_okButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChooseTextSplitterDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel chooserPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton okButton;
    private javax.swing.JRadioButton paragraphButton;
    private javax.swing.JRadioButton regexButton;
    private javax.swing.JPanel regexPanel;
    private javax.swing.JTextField regexTextField;
    private javax.swing.JRadioButton wordButton;
    // End of variables declaration//GEN-END:variables
    
    public void removeUpdate(DocumentEvent e) {
        checkExpression();
    }

    public void insertUpdate(DocumentEvent e) {
        checkExpression();
    }

    public void changedUpdate(DocumentEvent e) {
        checkExpression();
    }
    
    private void checkExpression(){
        String text = regexTextField.getText();
        try {
            Pattern.compile(text);
            regexTextField.setToolTipText("Regular expression OK");
            regexTextField.setForeground(java.awt.Color.BLACK);    
            okButton.setEnabled(true);
        } catch (PatternSyntaxException pse){
            String message = pse.getMessage();
            regexTextField.setToolTipText(message);
            regexTextField.setForeground(java.awt.Color.GRAY);            
            okButton.setEnabled(false);
        }
    }
    
}
