/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.exmaralda.partitureditor.jexmaraldaswing;

/**
 *
 * @author Schmidt
 */
public class SilenceDetectionParameterPanel extends javax.swing.JPanel { 

    /**
     * Creates new form SilenceDetectionParameterPanel
     */
    public SilenceDetectionParameterPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        threshholdParametersPanel = new javax.swing.JPanel();
        thresholdExplanationLabel = new javax.swing.JLabel();
        threshholdSpinnersPanel = new javax.swing.JPanel();
        threshStartLabel = new javax.swing.JLabel();
        threshStartSpinner = new javax.swing.JSpinner();
        threshEndLabel = new javax.swing.JLabel();
        threshEndSpinner = new javax.swing.JSpinner();
        threshStepLabel = new javax.swing.JLabel();
        threshStepSpinner = new javax.swing.JSpinner();
        minumLengthParametersPanel = new javax.swing.JPanel();
        thresholdExplanationLabel1 = new javax.swing.JLabel();
        minimumLengthSpinnersPanel = new javax.swing.JPanel();
        minlengthStartLabel = new javax.swing.JLabel();
        minlengthStartSpinner = new javax.swing.JSpinner();
        minlengthEndLabel = new javax.swing.JLabel();
        minlengthEndSpinner = new javax.swing.JSpinner();
        minlengthStepLabel = new javax.swing.JLabel();
        minlengthStepSpinner = new javax.swing.JSpinner();
        iterationsPanel = new javax.swing.JPanel();
        iterationsLabel = new javax.swing.JLabel();
        scoreParametersPanel = new javax.swing.JPanel();
        thresholdExplanationLabel2 = new javax.swing.JLabel();
        minimumLengthSpinnersPanel1 = new javax.swing.JPanel();
        t1Label = new javax.swing.JLabel();
        t1Spinner = new javax.swing.JSpinner();
        t2Label = new javax.swing.JLabel();
        t2Spinner = new javax.swing.JSpinner();
        t3Label = new javax.swing.JLabel();
        t3Spinner = new javax.swing.JSpinner();
        t4Label = new javax.swing.JLabel();
        t4Spinner = new javax.swing.JSpinner();
        threshholdParametersPanel1 = new javax.swing.JPanel();
        thresholdExplanationLabel3 = new javax.swing.JLabel();
        threshholdSpinnersPanel1 = new javax.swing.JPanel();
        minLengthBetweenLabel = new javax.swing.JLabel();
        minLengthBetweenSpinner = new javax.swing.JSpinner();
        shrinkAmountLabel = new javax.swing.JLabel();
        shrinkAmountSpinner = new javax.swing.JSpinner();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        threshholdParametersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Threshhold Parameters"));
        threshholdParametersPanel.setLayout(new java.awt.BorderLayout());

        thresholdExplanationLabel.setText("A threshhold is the maximum average energy value for a stretch of the recording to be treated as pause");
        threshholdParametersPanel.add(thresholdExplanationLabel, java.awt.BorderLayout.NORTH);

        threshStartLabel.setText("Start: ");
        threshholdSpinnersPanel.add(threshStartLabel);

        threshStartSpinner.setModel(new javax.swing.SpinnerNumberModel(0.005d, 0.001d, 0.6d, 0.001d));
        threshStartSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                threshStartSpinnerStateChanged(evt);
            }
        });
        threshholdSpinnersPanel.add(threshStartSpinner);

        threshEndLabel.setText(" End: ");
        threshholdSpinnersPanel.add(threshEndLabel);

        threshEndSpinner.setModel(new javax.swing.SpinnerNumberModel(0.015d, 0.001d, 0.6d, 0.001d));
        threshEndSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                threshEndSpinnerStateChanged(evt);
            }
        });
        threshholdSpinnersPanel.add(threshEndSpinner);

        threshStepLabel.setText(" Step: ");
        threshholdSpinnersPanel.add(threshStepLabel);

        threshStepSpinner.setModel(new javax.swing.SpinnerNumberModel(0.001d, 0.001d, 0.2d, 0.001d));
        threshStepSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                threshStepSpinnerStateChanged(evt);
            }
        });
        threshholdSpinnersPanel.add(threshStepSpinner);

        threshholdParametersPanel.add(threshholdSpinnersPanel, java.awt.BorderLayout.CENTER);

        add(threshholdParametersPanel);

        minumLengthParametersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Minimum Pause Length"));
        minumLengthParametersPanel.setLayout(new java.awt.BorderLayout());

        thresholdExplanationLabel1.setText("The minimum length of a stretch to be treated as a pause");
        minumLengthParametersPanel.add(thresholdExplanationLabel1, java.awt.BorderLayout.NORTH);

        minlengthStartLabel.setText("Start: ");
        minimumLengthSpinnersPanel.add(minlengthStartLabel);

        minlengthStartSpinner.setModel(new javax.swing.SpinnerNumberModel(0.2d, 0.1d, 3.0d, 0.1d));
        minlengthStartSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minlengthStartSpinnerStateChanged(evt);
            }
        });
        minimumLengthSpinnersPanel.add(minlengthStartSpinner);

        minlengthEndLabel.setText(" End: ");
        minimumLengthSpinnersPanel.add(minlengthEndLabel);

        minlengthEndSpinner.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.2d, 4.0d, 0.1d));
        minlengthEndSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minlengthEndSpinnerStateChanged(evt);
            }
        });
        minimumLengthSpinnersPanel.add(minlengthEndSpinner);

        minlengthStepLabel.setText(" Step: ");
        minimumLengthSpinnersPanel.add(minlengthStepLabel);

        minlengthStepSpinner.setModel(new javax.swing.SpinnerNumberModel(0.1d, 0.05d, 0.5d, 0.05d));
        minlengthStepSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minlengthStepSpinnerStateChanged(evt);
            }
        });
        minimumLengthSpinnersPanel.add(minlengthStepSpinner);

        minumLengthParametersPanel.add(minimumLengthSpinnersPanel, java.awt.BorderLayout.CENTER);

        add(minumLengthParametersPanel);

        iterationsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Iterations"));

        iterationsLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        iterationsLabel.setText("<html>The current configuration requires <b>90</b> iterations through the audio file</html>");
        iterationsPanel.add(iterationsLabel);

        add(iterationsPanel);

        scoreParametersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Score Parameters"));
        scoreParametersPanel.setLayout(new java.awt.BorderLayout());

        thresholdExplanationLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/SilenceScoreSchema.png"))); // NOI18N
        scoreParametersPanel.add(thresholdExplanationLabel2, java.awt.BorderLayout.NORTH);

        t1Label.setText("T1: ");
        minimumLengthSpinnersPanel1.add(t1Label);

        t1Spinner.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.0d, 10.0d, 0.5d));
        minimumLengthSpinnersPanel1.add(t1Spinner);

        t2Label.setText(" T2: ");
        minimumLengthSpinnersPanel1.add(t2Label);

        t2Spinner.setModel(new javax.swing.SpinnerNumberModel(3.0d, 0.0d, 10.0d, 0.5d));
        minimumLengthSpinnersPanel1.add(t2Spinner);

        t3Label.setText(" T3: ");
        minimumLengthSpinnersPanel1.add(t3Label);

        t3Spinner.setModel(new javax.swing.SpinnerNumberModel(7.0d, 1.0d, 20.0d, 0.5d));
        minimumLengthSpinnersPanel1.add(t3Spinner);

        t4Label.setText(" T4: ");
        minimumLengthSpinnersPanel1.add(t4Label);

        t4Spinner.setModel(new javax.swing.SpinnerNumberModel(12.0d, 3.0d, 30.0d, 0.5d));
        minimumLengthSpinnersPanel1.add(t4Spinner);

        scoreParametersPanel.add(minimumLengthSpinnersPanel1, java.awt.BorderLayout.CENTER);

        add(scoreParametersPanel);

        threshholdParametersPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Smoothing Parameters"));
        threshholdParametersPanel1.setLayout(new java.awt.BorderLayout());
        threshholdParametersPanel1.add(thresholdExplanationLabel3, java.awt.BorderLayout.NORTH);

        minLengthBetweenLabel.setText("Minimum length of interval between pauses: ");
        threshholdSpinnersPanel1.add(minLengthBetweenLabel);

        minLengthBetweenSpinner.setModel(new javax.swing.SpinnerNumberModel(0.3d, 0.1d, 10.0d, 0.1d));
        threshholdSpinnersPanel1.add(minLengthBetweenSpinner);

        shrinkAmountLabel.setText(" Shrink Amount: ");
        threshholdSpinnersPanel1.add(shrinkAmountLabel);

        shrinkAmountSpinner.setModel(new javax.swing.SpinnerNumberModel(0.005d, 0.0d, 0.1d, 0.005d));
        threshholdSpinnersPanel1.add(shrinkAmountSpinner);

        threshholdParametersPanel1.add(threshholdSpinnersPanel1, java.awt.BorderLayout.CENTER);

        add(threshholdParametersPanel1);
    }// </editor-fold>//GEN-END:initComponents

    private void threshStartSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_threshStartSpinnerStateChanged
        updateSpinners();
    }//GEN-LAST:event_threshStartSpinnerStateChanged

    private void threshEndSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_threshEndSpinnerStateChanged
        updateSpinners();
    }//GEN-LAST:event_threshEndSpinnerStateChanged

    private void threshStepSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_threshStepSpinnerStateChanged
        updateSpinners();
    }//GEN-LAST:event_threshStepSpinnerStateChanged

    private void minlengthStartSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minlengthStartSpinnerStateChanged
        updateSpinners();
    }//GEN-LAST:event_minlengthStartSpinnerStateChanged

    private void minlengthEndSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minlengthEndSpinnerStateChanged
        updateSpinners();
    }//GEN-LAST:event_minlengthEndSpinnerStateChanged

    private void minlengthStepSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minlengthStepSpinnerStateChanged
        updateSpinners();
    }//GEN-LAST:event_minlengthStepSpinnerStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel iterationsLabel;
    private javax.swing.JPanel iterationsPanel;
    private javax.swing.JLabel minLengthBetweenLabel;
    private javax.swing.JSpinner minLengthBetweenSpinner;
    private javax.swing.JPanel minimumLengthSpinnersPanel;
    private javax.swing.JPanel minimumLengthSpinnersPanel1;
    private javax.swing.JLabel minlengthEndLabel;
    private javax.swing.JSpinner minlengthEndSpinner;
    private javax.swing.JLabel minlengthStartLabel;
    private javax.swing.JSpinner minlengthStartSpinner;
    private javax.swing.JLabel minlengthStepLabel;
    private javax.swing.JSpinner minlengthStepSpinner;
    private javax.swing.JPanel minumLengthParametersPanel;
    private javax.swing.JPanel scoreParametersPanel;
    private javax.swing.JLabel shrinkAmountLabel;
    private javax.swing.JSpinner shrinkAmountSpinner;
    private javax.swing.JLabel t1Label;
    private javax.swing.JSpinner t1Spinner;
    private javax.swing.JLabel t2Label;
    private javax.swing.JSpinner t2Spinner;
    private javax.swing.JLabel t3Label;
    private javax.swing.JSpinner t3Spinner;
    private javax.swing.JLabel t4Label;
    private javax.swing.JSpinner t4Spinner;
    private javax.swing.JLabel threshEndLabel;
    private javax.swing.JSpinner threshEndSpinner;
    private javax.swing.JLabel threshStartLabel;
    private javax.swing.JSpinner threshStartSpinner;
    private javax.swing.JLabel threshStepLabel;
    private javax.swing.JSpinner threshStepSpinner;
    private javax.swing.JPanel threshholdParametersPanel;
    private javax.swing.JPanel threshholdParametersPanel1;
    private javax.swing.JPanel threshholdSpinnersPanel;
    private javax.swing.JPanel threshholdSpinnersPanel1;
    private javax.swing.JLabel thresholdExplanationLabel;
    private javax.swing.JLabel thresholdExplanationLabel1;
    private javax.swing.JLabel thresholdExplanationLabel2;
    private javax.swing.JLabel thresholdExplanationLabel3;
    // End of variables declaration//GEN-END:variables

    public double[] getParameters(){
        /*public static double DEFAULT_START_THRESHHOLD = 0.005;     //0.005
        public static double DEFAULT_END_THRESHHOLD =  0.015;     //0.015
        public static double DEFAULT_STEP_THRESHHOLD = 0.001;      //0.001
        public static double DEFAULT_START_MIN_LENGTH = 0.2;      //0.2
        public static double DEFAULT_END_MIN_LENGTH = 1.0;        //1
        public static double DEFAULT_STEP_MIN_LENGTH = 0.1;       //0.1
        public static double DEFAULT_MIN_LENGTH_BETWEEN = 0.3;    //0.3
        public static double DEFAULT_SHRINK_AMOUNT = 0.05;        //0.05
        public static double DEFAULT_MUCH_TOO_SHORT = 1.0;        //1.0
        public static double DEFAULT_OKAY = 3.0;                //3.0
        public static double DEFAULT_TOO_LONG = 7.0;             //7.0
        public static double DEFAULT_MUCH_TOO_LONG = 10.0;         //10.0
        public static double DEFAULT_TIMELINE_TOLERANCE = 0.00001;    //0.00001*/

        double[] result = {
            (Double)threshStartSpinner.getValue(),
            (Double)threshEndSpinner.getValue(),
            (Double)threshStepSpinner.getValue(),
            (Double)minlengthStartSpinner.getValue(),
            (Double)minlengthEndSpinner.getValue(),
            (Double)minlengthStepSpinner.getValue(),
            (Double)minLengthBetweenSpinner.getValue(),
            (Double)shrinkAmountSpinner.getValue(),
            (Double)t1Spinner.getValue(),
            (Double)t2Spinner.getValue(),
            (Double)t3Spinner.getValue(),
            (Double)t4Spinner.getValue(),
        };
        return result;
    }

    private void updateSpinners() {
        double startThreshHold = (Double)threshStartSpinner.getValue();
        double endThreshHold = (Double)threshEndSpinner.getValue();
        double stepThreshHold = (Double)threshStepSpinner.getValue();

        double startMinLength = (Double)minlengthStartSpinner.getValue();
        double endMinLength = (Double)minlengthEndSpinner.getValue();
        double stepMinLength = (Double)minlengthStepSpinner.getValue();
        
        int numberOfIterations =
            (int) ((Math.floor(((endThreshHold-startThreshHold)/stepThreshHold)) +1)
                * (Math.floor(((endMinLength-startMinLength)/stepMinLength))+1)); 
        
        iterationsLabel.setText("<html>The current configuration requires <b>" + Integer.toString(numberOfIterations) + "</b> iterations through the audio file</html>");        
    }
}
