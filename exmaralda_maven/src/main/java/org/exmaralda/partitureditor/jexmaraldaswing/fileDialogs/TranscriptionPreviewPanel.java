/*
 * TranscriptionPreviewPanel.java
 *
 * Created on 11. Maerz 2008, 17:23
 */

package org.exmaralda.partitureditor.jexmaraldaswing.fileDialogs;

import org.exmaralda.partitureditor.jexmaralda.sax.BasicTranscriptionSaxReader;
import org.exmaralda.partitureditor.jexmaralda.BasicTranscription;
import java.beans.PropertyChangeEvent;
import java.io.*;
import org.exmaralda.partitureditor.jexmaralda.*;
import org.exmaralda.partitureditor.jexmaralda.*;
import javax.swing.*;
import org.xml.sax.SAXException;
/**
 *
 * @author  thomas
 */
public class TranscriptionPreviewPanel extends javax.swing.JPanel implements java.beans.PropertyChangeListener {
    

    String name;
    BasicTranscriptionSaxReader reader = new BasicTranscriptionSaxReader();
    
    /** Creates new form TranscriptionPreviewPanel */
    public TranscriptionPreviewPanel() {
        initComponents();
    }

    public void propertyChange(PropertyChangeEvent evt) {
        String propertyName = evt.getPropertyName();
        
        // Make sure we are responding to the right event.
        if (propertyName.equals(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY)) {
            File selection = (File)evt.getNewValue();
            
            if (selection == null){
                clearEditorPane();
                name="";
                return;
            } else {
                name = selection.getAbsolutePath();
            }
        }
        
        if (autoCheckBox.isSelected()){
            showInfo();
        } else {
            clearEditorPane();            
        }
    }
    
    void clearEditorPane(){
        editorPane.setText("");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        editorPane = new javax.swing.JEditorPane();
        showInfoButton = new javax.swing.JButton();
        autoCheckBox = new javax.swing.JCheckBox();

        setPreferredSize(new java.awt.Dimension(200, 188));
        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(250, 150));

        editorPane.setBackground(new java.awt.Color(255, 255, 204));
        editorPane.setEditable(false);
        editorPane.setContentType("text/html");
        jScrollPane1.setViewportView(editorPane);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        showInfoButton.setText("Show Info");
        showInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showInfoButtonActionPerformed(evt);
            }
        });
        add(showInfoButton, java.awt.BorderLayout.NORTH);

        autoCheckBox.setText("Auto");
        autoCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        autoCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        autoCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoCheckBoxActionPerformed(evt);
            }
        });
        add(autoCheckBox, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void autoCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoCheckBoxActionPerformed
        showInfoButton.setEnabled(!autoCheckBox.isSelected());
    }//GEN-LAST:event_autoCheckBoxActionPerformed

    private void showInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showInfoButtonActionPerformed
        showInfo();
    }//GEN-LAST:event_showInfoButtonActionPerformed
    
    private void showInfo(){
        if (name.length()<=0){
          clearEditorPane();
        } else {
            StringBuffer sb = new StringBuffer();
            try {                
                BasicTranscription bt = reader.readFromFile(name, true);
                if (!(reader.getRootElementName().equals("basic-transcription"))){
                    sb.append("<b>Not a basic transcription</b> - root element is '" + reader.getRootElementName() + "'");
                } else {
                    sb.append("<b>Transcription Name: </b><span style=\"color:red\"> " + bt.getHead().getMetaInformation().getTranscriptionName() + "</span>");
                    sb.append("<br/>");
                    sb.append("<b>Project Name: </b> " + bt.getHead().getMetaInformation().getProjectName());
                    sb.append("<br/>");
                    sb.append("<b>Transcription Convention: </b> " + bt.getHead().getMetaInformation().getTranscriptionConvention());
                    sb.append("<br/>");
                    sb.append("<b>Comment: </b> " + bt.getHead().getMetaInformation().getComment());
                    sb.append("<br/>");
                    sb.append("<b>Speakers: </b> ");
                    for (int pos=0; pos<bt.getHead().getSpeakertable().getNumberOfSpeakers(); pos++){
                        sb.append(bt.getHead().getSpeakertable().getSpeakerAt(pos).getAbbreviation());
                        if (pos<bt.getHead().getSpeakertable().getNumberOfSpeakers()-1){
                            sb.append(", ");
                        }
                    }
                }
            } catch (SAXException ex) {
                sb.append("<b>Error: </b>" + ex.getLocalizedMessage());
                ex.printStackTrace();
            }
            editorPane.setText(sb.toString());      
            editorPane.setCaretPosition(0);
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoCheckBox;
    private javax.swing.JEditorPane editorPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton showInfoButton;
    // End of variables declaration//GEN-END:variables
    
}
