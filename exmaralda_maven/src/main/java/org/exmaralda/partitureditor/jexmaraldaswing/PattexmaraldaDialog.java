/*
 * PattexmaraldaDialog.java
 *
 * Created on 1. Juni 2004, 12:11
 */

package org.exmaralda.partitureditor.jexmaraldaswing;

import org.exmaralda.common.helpers.Internationalizer;
import org.exmaralda.partitureditor.jexmaralda.*;
import java.util.*;
import javax.swing.*;

/**
 *
 * @author  thomas
 */
public class PattexmaraldaDialog extends javax.swing.JDialog {
    
    BasicTranscription transcription1;
    BasicTranscription transcription2;
    Vector mappings = new Vector();
    DefaultListModel mappingsListModel = new DefaultListModel();
    boolean OK = false;
    
    /** Creates new form PattexmaraldaDialog */
    public PattexmaraldaDialog(java.awt.Frame parent, boolean modal, BasicTranscription t1, BasicTranscription t2) {
        super(parent, modal);
        transcription1 = t1;
        transcription2 = t2;
        initComponents();
        initLists();
        Internationalizer.internationalizeDialogToolTips(this);        
    }
    
    public String[][] getTierIDMappings() {
        String[][] result = new String[mappings.size()][2];
        for (int pos=0; pos<mappings.size(); pos++){
            result[pos] = (String[])(mappings.elementAt(pos));
        }
        return result;
    }

    public boolean getMergeTimelines(){
        return mergeTimelinesRadioButton.isSelected();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        timelineMethodButtonGroup = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        transcription1ScrollPane = new javax.swing.JScrollPane();
        transcription1List = new javax.swing.JList();
        transcription2ScrollPane = new javax.swing.JScrollPane();
        transcription2List = new javax.swing.JList();
        buttonPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        removeAllButton = new javax.swing.JButton();
        autoPositionButton = new javax.swing.JButton();
        autoContentButton = new javax.swing.JButton();
        mappingsScrollPane = new javax.swing.JScrollPane();
        mappingsList = new javax.swing.JList();
        okCancelPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        timelineMethodPanel = new javax.swing.JPanel();
        mergeTimelinesRadioButton = new javax.swing.JRadioButton();
        appendTimelinesRadioButton = new javax.swing.JRadioButton();

        setTitle("Glue transcriptions");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        mainPanel.setPreferredSize(new java.awt.Dimension(600, 200));
        mainPanel.setLayout(new javax.swing.BoxLayout(mainPanel, javax.swing.BoxLayout.LINE_AXIS));

        transcription1ScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Transcription 1"));
        transcription1ScrollPane.setPreferredSize(new java.awt.Dimension(120, 100));

        transcription1List.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        transcription1ScrollPane.setViewportView(transcription1List);

        mainPanel.add(transcription1ScrollPane);

        transcription2ScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Transcription 2"));
        transcription2ScrollPane.setPreferredSize(new java.awt.Dimension(120, 100));

        transcription2List.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        transcription2ScrollPane.setViewportView(transcription2List);

        mainPanel.add(transcription2ScrollPane);

        buttonPanel.setMaximumSize(new java.awt.Dimension(160, 130));
        buttonPanel.setPreferredSize(new java.awt.Dimension(160, 130));
        buttonPanel.setLayout(new javax.swing.BoxLayout(buttonPanel, javax.swing.BoxLayout.Y_AXIS));

        addButton.setText("Add");
        addButton.setMaximumSize(new java.awt.Dimension(160, 26));
        addButton.setPreferredSize(new java.awt.Dimension(160, 26));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(addButton);

        removeButton.setText("Remove");
        removeButton.setMaximumSize(new java.awt.Dimension(160, 26));
        removeButton.setPreferredSize(new java.awt.Dimension(160, 26));
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(removeButton);

        removeAllButton.setText("Remove all");
        removeAllButton.setMaximumSize(new java.awt.Dimension(160, 26));
        removeAllButton.setPreferredSize(new java.awt.Dimension(160, 26));
        removeAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(removeAllButton);

        autoPositionButton.setText("Auto (Position)");
        autoPositionButton.setMaximumSize(new java.awt.Dimension(160, 26));
        autoPositionButton.setPreferredSize(new java.awt.Dimension(160, 26));
        autoPositionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoPositionButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(autoPositionButton);

        autoContentButton.setText("Auto (Properties)");
        autoContentButton.setMaximumSize(new java.awt.Dimension(160, 26));
        autoContentButton.setPreferredSize(new java.awt.Dimension(160, 26));
        autoContentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoContentButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(autoContentButton);

        mainPanel.add(buttonPanel);

        mappingsScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Mappings"));
        mappingsScrollPane.setPreferredSize(new java.awt.Dimension(180, 100));
        mappingsScrollPane.setViewportView(mappingsList);

        mainPanel.add(mappingsScrollPane);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        okCancelPanel.add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        okCancelPanel.add(cancelButton);

        getContentPane().add(okCancelPanel, java.awt.BorderLayout.SOUTH);

        timelineMethodPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Timeline method"));

        timelineMethodButtonGroup.add(mergeTimelinesRadioButton);
        mergeTimelinesRadioButton.setSelected(true);
        mergeTimelinesRadioButton.setText("Merge timelines");
        mergeTimelinesRadioButton.setToolTipText("Put the timelines together according to the absolute time values");
        timelineMethodPanel.add(mergeTimelinesRadioButton);

        timelineMethodButtonGroup.add(appendTimelinesRadioButton);
        appendTimelinesRadioButton.setText("Append timelines");
        timelineMethodPanel.add(appendTimelinesRadioButton);

        getContentPane().add(timelineMethodPanel, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void autoContentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoContentButtonActionPerformed
        // Add your handling code here:
        mappings.clear();
        mappingsListModel.clear();
        Vector newMappings = transcription1.makeTierIDMappings(transcription2);
        for (int pos=0; pos<newMappings.size(); pos++){
            String[] mapping = (String[])(newMappings.elementAt(pos));
            try{
                String desc1 = transcription1.getBody().getTierWithID(mapping[0]).getDescription(transcription1.getHead().getSpeakertable());
                String desc2 = transcription2.getBody().getTierWithID(mapping[1]).getDescription(transcription2.getHead().getSpeakertable());
                mappingsListModel.addElement(desc1 + " <-> " + desc2);
            } catch (Exception e) {}
        }
        mappings.addAll(newMappings);
    }//GEN-LAST:event_autoContentButtonActionPerformed

    private void autoPositionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoPositionButtonActionPerformed
        // Add your handling code here:
        mappings.clear();
        mappingsListModel.clear();
        for (int pos=0; pos<Math.min(transcription1.getBody().getNumberOfTiers(), transcription2.getBody().getNumberOfTiers()); pos++){
            Tier tier1 = transcription1.getBody().getTierAt(pos);
            Tier tier2 = transcription2.getBody().getTierAt(pos);
            String mappingString =    tier1.getDescription(transcription1.getHead().getSpeakertable())
                                    + " <-> " 
                                    + tier2.getDescription(transcription2.getHead().getSpeakertable());
            mappingsListModel.addElement(mappingString);            
            String[] mapping = {tier1.getID(), tier2.getID()};
            mappings.addElement(mapping);
        }
    }//GEN-LAST:event_autoPositionButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // Add your handling code here:
        OK = false;
        setVisible(false);
        dispose();                
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // Add your handling code here:
        OK = true;
        setVisible(false);
        dispose();        
    }//GEN-LAST:event_okButtonActionPerformed

    private void removeAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllButtonActionPerformed
        // Add your handling code here:
        mappings.clear();
        mappingsListModel.clear();
    }//GEN-LAST:event_removeAllButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // Add your handling code here:
        int index = mappingsList.getSelectedIndex();
        if (index<0){return;}
        mappings.removeElementAt(index);
        mappingsListModel.removeElementAt(index);
    }//GEN-LAST:event_removeButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // Add your handling code here:
        String mappingString =    ((String)(transcription1List.getSelectedValue())) 
                                + " <-> " 
                                + ((String)(transcription2List.getSelectedValue()));
        mappingsListModel.addElement(mappingString);
        String tierID1 = transcription1.getBody().getTierAt(transcription1List.getSelectedIndex()).getID();
        // fixed a bug here on 29-03-2009
        String tierID2 = transcription2.getBody().getTierAt(transcription2List.getSelectedIndex()).getID();
        String[] mapping = {tierID1, tierID2};
        mappings.addElement(mapping);
    }//GEN-LAST:event_addButtonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        OK = false;
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //new PattexmaraldaDialog(new javax.swing.JFrame(), true).show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JRadioButton appendTimelinesRadioButton;
    private javax.swing.JButton autoContentButton;
    private javax.swing.JButton autoPositionButton;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JList mappingsList;
    private javax.swing.JScrollPane mappingsScrollPane;
    private javax.swing.JRadioButton mergeTimelinesRadioButton;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel okCancelPanel;
    private javax.swing.JButton removeAllButton;
    private javax.swing.JButton removeButton;
    private javax.swing.ButtonGroup timelineMethodButtonGroup;
    private javax.swing.JPanel timelineMethodPanel;
    private javax.swing.JList transcription1List;
    private javax.swing.JScrollPane transcription1ScrollPane;
    private javax.swing.JList transcription2List;
    private javax.swing.JScrollPane transcription2ScrollPane;
    // End of variables declaration//GEN-END:variables
    
    void initLists(){
        transcription1List.setModel(new TiersListModel(transcription1));
        transcription1List.setSelectedIndex(0);
        transcription2List.setModel(new TiersListModel(transcription2));
        transcription2List.setSelectedIndex(0);
        mappingsList.setModel(mappingsListModel);
    }
    
    public boolean glueTranscriptions(){
        java.awt.Dimension dialogSize = this.getPreferredSize();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(screenSize.width/2 - dialogSize.width/2, screenSize.height/2 - dialogSize.height/2);
        super.show();
        return OK;
    }
}

class TiersListModel extends javax.swing.AbstractListModel {
    
    BasicTranscription bt;
    
    public TiersListModel(BasicTranscription t){
        bt = t;
    }
    
    public Object getElementAt(int index) {
        Tier tier = bt.getBody().getTierAt(index);        
        return tier.getDescription(bt.getHead().getSpeakertable());
    }
    
    public int getSize() {
        return bt.getBody().getNumberOfTiers();
    }
    
}
