/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WordListDialog.java
 *
 * Created on 10.02.2009, 14:10:15
 */

package org.exmaralda.partitureditor.jexmaraldaswing;

import java.io.File;
import java.io.FileOutputStream;
import java.util.regex.PatternSyntaxException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
//import javax.swing.RowFilter;
//import javax.swing.table.TableRowSorter;
import org.exmaralda.partitureditor.jexmaralda.Event;
import org.exmaralda.partitureditor.jexmaralda.SegmentedTranscription;
import org.exmaralda.partitureditor.jexmaralda.convert.StylesheetFactory;
import org.exmaralda.partitureditor.jexmaraldaswing.fileFilters.ParameterFileFilter;
import org.exmaralda.partitureditor.search.EventSearchResult;
import org.exmaralda.partitureditor.search.SearchResultListener;
import org.jdom.Element;

/**
 *
 * @author thomas
 */
public class WordListDialog extends javax.swing.JDialog {

    javax.swing.event.EventListenerList listenerList = new javax.swing.event.EventListenerList();

    SegmentedTranscription transcription;
    //TableRowSorter rowSorter;
    TableSorter rowSorter;
    WordListTableModel tableModel;

    /** Creates new form WordListDialog */
    public WordListDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public void setTranscription(SegmentedTranscription st){
        transcription = st;
        wordListTable.setDefaultRenderer(Object.class, new WordListTableCellRenderer(st));
        tableModel = new WordListTableModel(st);
        //wordListTable.setModel(tableModel);
        //rowSorter = new TableRowSorter(tableModel);
        //wordListTable.setRowSorter(rowSorter);
        rowSorter = new TableSorter(tableModel);
        wordListTable.setModel(rowSorter);

        wordListTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        wordListTable.getColumnModel().getColumn(0).setHeaderValue("Word");
        wordListTable.getColumnModel().getColumn(1).setPreferredWidth(60);
        wordListTable.getColumnModel().getColumn(1).setHeaderValue("Speaker");

        rowSorter.setTableHeader(wordListTable.getTableHeader());
        setCountString();

    }

    public void setCountString(){
        String cs = tableModel.getTokenCount() + " tokens / "
                + tableModel.getTypeCount() + " types";
        this.countLabel.setText(cs);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        wordListScrollPane = new javax.swing.JScrollPane();
        wordListTable = new javax.swing.JTable();
        upperPanel = new javax.swing.JPanel();
        filterPanel = new javax.swing.JPanel();
        filterExpressionTextField = new javax.swing.JTextField();
        filterButton = new javax.swing.JButton();
        countPanel = new javax.swing.JPanel();
        countLabel = new javax.swing.JLabel();
        refreshPanel = new javax.swing.JPanel();
        refreshButton = new javax.swing.JButton();
        lowerPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Word list");

        wordListScrollPane.setPreferredSize(new java.awt.Dimension(150, 600));

        wordListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        wordListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wordListTableMouseClicked(evt);
            }
        });
        wordListScrollPane.setViewportView(wordListTable);

        getContentPane().add(wordListScrollPane, java.awt.BorderLayout.CENTER);

        upperPanel.setLayout(new javax.swing.BoxLayout(upperPanel, javax.swing.BoxLayout.Y_AXIS));

        filterPanel.setLayout(new javax.swing.BoxLayout(filterPanel, javax.swing.BoxLayout.LINE_AXIS));

        filterExpressionTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterExpressionTextFieldActionPerformed(evt);
            }
        });
        filterPanel.add(filterExpressionTextField);

        filterButton.setText("Filter");
        filterButton.setEnabled(false);
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });
        filterPanel.add(filterButton);

        upperPanel.add(filterPanel);

        countLabel.setText("jLabel1");
        countPanel.add(countLabel);

        upperPanel.add(countPanel);

        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/Reformat.gif"))); // NOI18N
        refreshButton.setText("Refresh");
        refreshPanel.add(refreshButton);

        upperPanel.add(refreshPanel);

        getContentPane().add(upperPanel, java.awt.BorderLayout.PAGE_START);

        saveButton.setText("Save as...");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        lowerPanel.add(saveButton);

        getContentPane().add(lowerPanel, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        /*try{
            RowFilter rf = RowFilter.regexFilter(filterExpressionTextField.getText(),0);
            rowSorter.setRowFilter(rf);        
        } catch (PatternSyntaxException pse){
            JOptionPane.showMessageDialog(this, pse.getLocalizedMessage());
            pse.printStackTrace();
            rowSorter.setRowFilter(null);
        }*/

    }//GEN-LAST:event_filterButtonActionPerformed

    private void filterExpressionTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterExpressionTextFieldActionPerformed
        filterButtonActionPerformed(evt);
    }//GEN-LAST:event_filterExpressionTextFieldActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        ParameterFileFilter fullWordListFileFilter = new ParameterFileFilter("html","Simple word list (HTML)");
        ParameterFileFilter speakerwiseWordListFileFilter = new ParameterFileFilter("html", "Word list by speaker (HTML)");
        fileChooser.addChoosableFileFilter(fullWordListFileFilter);
        fileChooser.addChoosableFileFilter(speakerwiseWordListFileFilter);
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setDialogTitle("Save wordlist to file");
        int option = fileChooser.showSaveDialog(this);
        if (option==JFileChooser.APPROVE_OPTION){
            try {
                String xsl = "";
                if (fileChooser.getFileFilter() == fullWordListFileFilter) {
                    xsl = "/org/exmaralda/partitureditor/jexmaralda/xsl/Segmented2SimpleWordlist.xsl";
                } else if (fileChooser.getFileFilter() == speakerwiseWordListFileFilter) {
                    xsl = "/org/exmaralda/partitureditor/jexmaralda/xsl/Segmented2WordlistBySpeaker.xsl";
                }
                StylesheetFactory sf2 = new StylesheetFactory(true);
                String out = sf2.applyInternalStylesheetToString(xsl, transcription.toXML());
                File file = fileChooser.getSelectedFile();
                String filename = file.getName();
                if (!(filename.contains("."))){
                    file = new File(file.getAbsolutePath() + ".html");
                }
                if (file.exists()){
                    int choice = JOptionPane.showConfirmDialog(this, "File \n" +
                            file.getAbsolutePath()
                            + "\nexists. Overwrite?");
                    if (choice==JOptionPane.CANCEL_OPTION) return;
                }
                FileOutputStream fos = new FileOutputStream(file);
                fos.write(out.getBytes("UTF-8"));
                fos.close();

            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, ex.getLocalizedMessage());
            }
        }

    }//GEN-LAST:event_saveButtonActionPerformed

    private void wordListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wordListTableMouseClicked
        if (evt.getClickCount()==2){
            //int index = this.rowSorter.convertRowIndexToModel(wordListTable.getSelectedRow());
            int index = rowSorter.modelIndex(wordListTable.getSelectedRow());
            Element wordElement = tableModel.getWordElement(index);
            EventSearchResult esr = new EventSearchResult();
            esr.tierID = wordElement.getAttributeValue("tier");
            Event ev = new Event();
            ev.setStart(wordElement.getAttributeValue("start"));
            esr.event = ev;
            this.fireSearchResult(esr);
        }
    }//GEN-LAST:event_wordListTableMouseClicked

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel countLabel;
    private javax.swing.JPanel countPanel;
    private javax.swing.JButton filterButton;
    private javax.swing.JTextField filterExpressionTextField;
    private javax.swing.JPanel filterPanel;
    private javax.swing.JPanel lowerPanel;
    public javax.swing.JButton refreshButton;
    private javax.swing.JPanel refreshPanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel upperPanel;
    private javax.swing.JScrollPane wordListScrollPane;
    private javax.swing.JTable wordListTable;
    // End of variables declaration//GEN-END:variables


    public void addSearchResultListener(SearchResultListener l) {
         listenerList.add(SearchResultListener.class, l);
    }

    public void removeSearchResultListener(SearchResultListener l) {
         listenerList.remove(SearchResultListener.class, l);
    }

    public void removeAllListeners(){
        listenerList = new javax.swing.event.EventListenerList();
    }

    protected void fireSearchResult(EventSearchResult esr) {
        System.out.println("Firing search result");
        Object[] listeners = listenerList.getListenerList();
        for (int i = listeners.length-2; i>=0; i-=2) {
             if (listeners[i]==SearchResultListener.class) {
                ((SearchResultListener)listeners[i+1]).processSearchResult(esr);
            }
         }
    }



}
