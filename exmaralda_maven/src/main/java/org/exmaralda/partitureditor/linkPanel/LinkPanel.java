/*
 * LinkPanel.java
 *
 * Created on 6. November 2001, 13:03
 */

package org.exmaralda.partitureditor.linkPanel;

import org.exmaralda.partitureditor.jexmaralda.Event;
import com.klg.jclass.table.*;
import java.io.*;
import javax.swing.*;
/**
 *
 * @author  Thomas
 * @version 
 */
public class LinkPanel extends javax.swing.JPanel implements JCTableDataListener {

    private Event event;
    private int row;
    private int col;
    private static final String[] MEDIUM_TYPES = {"none", "Audio", "Video", "Image", "Text", "Other"};    
    private String directory;
    javax.swing.event.EventListenerList eventListenerList;    
    ScrollablePicture scrollablePicture;
    org.exmaralda.partitureditor.sound.JavaFXPlayer player = null;
    JLabel errorLabel;
    java.awt.TextArea textdisplay;
    
    /** Creates new form LinkPanel */
    public LinkPanel() {
        this.eventListenerList = new javax.swing.event.EventListenerList();
        scrollablePicture = new ScrollablePicture(null, 10);
        initComponents ();
        event = new Event();
        directory = new String();
        displayPanel.setVisible(false);        
    }
    
    public Event getEvent(){
        return event;
    }
    
    public void setEvent(Event e, int r, int c){
        event = e;
        row = r;
        col = c;
        urlTextField.setEnabled(true);
        browseButton.setEnabled(true);
        mediumComboBox.setEnabled(true);
        urlTextField.setText(event.getURL());
        descriptionTextLabel.setText(event.getDescription());
        switch (event.getMedium()) {
            case "none":
                mediumComboBox.setSelectedIndex(0);
                urlTextField.setEnabled(false);
                browseButton.setEnabled(false);
                displayPanel.setVisible(false);
                packLinkPanel();
                break;
            case "aud":
                mediumComboBox.setSelectedIndex(1);
                setAudioVideo();
                break;
            case "vid":
                mediumComboBox.setSelectedIndex(2);
                setAudioVideo();
                break;
            case "img":
                mediumComboBox.setSelectedIndex(3);
                setImage();
                break;
            case "txt":
                mediumComboBox.setSelectedIndex(4);
                setText();
                break;
            case "oth":
                mediumComboBox.setSelectedIndex(5);
                displayPanel.setVisible(false);
                packLinkPanel();
                break;
            default:
                break;
        }
    }
    
    public void setDirectory(String d){
        directory = d;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        displayPanel = new javax.swing.JPanel();
        displayPanel2 = new javax.swing.JPanel();
        mediaControlPanel = new javax.swing.JPanel();
        detailsPanel = new javax.swing.JPanel();
        eventDescriptionPanel = new javax.swing.JPanel();
        descriptionTextLabel = new javax.swing.JLabel();
        linkMediumPanel = new javax.swing.JPanel();
        mediumComboBox = new javax.swing.JComboBox(MEDIUM_TYPES);
        linkURLPanel = new javax.swing.JPanel();
        urlTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        displayPanel.setLayout(new javax.swing.BoxLayout(displayPanel, javax.swing.BoxLayout.Y_AXIS));

        displayPanel2.setLayout(new javax.swing.BoxLayout(displayPanel2, javax.swing.BoxLayout.X_AXIS));

        displayPanel.add(displayPanel2);

        mediaControlPanel.setLayout(new javax.swing.BoxLayout(mediaControlPanel, javax.swing.BoxLayout.X_AXIS));

        displayPanel.add(mediaControlPanel);

        add(displayPanel, java.awt.BorderLayout.NORTH);

        detailsPanel.setLayout(new javax.swing.BoxLayout(detailsPanel, javax.swing.BoxLayout.Y_AXIS));

        detailsPanel.setPreferredSize(new java.awt.Dimension(250, 150));
        detailsPanel.setMaximumSize(new java.awt.Dimension(1093, 150));
        eventDescriptionPanel.setLayout(new javax.swing.BoxLayout(eventDescriptionPanel, javax.swing.BoxLayout.X_AXIS));

        eventDescriptionPanel.setBorder(new javax.swing.border.TitledBorder(null, "Event description", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10)));
        eventDescriptionPanel.setAlignmentX(0.0F);
        eventDescriptionPanel.setPreferredSize(new java.awt.Dimension(243, 49));
        eventDescriptionPanel.setMaximumSize(new java.awt.Dimension(1093, 49));
        eventDescriptionPanel.setMinimumSize(new java.awt.Dimension(113, 49));
        descriptionTextLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        descriptionTextLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        descriptionTextLabel.setBackground(java.awt.Color.white);
        descriptionTextLabel.setPreferredSize(new java.awt.Dimension(400, 16));
        descriptionTextLabel.setMaximumSize(new java.awt.Dimension(400, 16));
        descriptionTextLabel.setMinimumSize(new java.awt.Dimension(400, 16));
        eventDescriptionPanel.add(descriptionTextLabel);

        detailsPanel.add(eventDescriptionPanel);

        linkMediumPanel.setLayout(new javax.swing.BoxLayout(linkMediumPanel, javax.swing.BoxLayout.X_AXIS));

        linkMediumPanel.setBorder(new javax.swing.border.TitledBorder(null, "Link medium", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10)));
        linkMediumPanel.setAlignmentX(0.0F);
        linkMediumPanel.setMaximumSize(new java.awt.Dimension(1093, 49));
        linkMediumPanel.setMinimumSize(new java.awt.Dimension(113, 49));
        linkMediumPanel.setPreferredSize(new java.awt.Dimension(243, 49));
        mediumComboBox.setPreferredSize(new java.awt.Dimension(130, 25));
        mediumComboBox.setMaximumSize(new java.awt.Dimension(130, 25));
        mediumComboBox.setMinimumSize(new java.awt.Dimension(130, 25));
        mediumComboBox.setEnabled(false);
        mediumComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediumComboBoxActionPerformed(evt);
            }
        });

        linkMediumPanel.add(mediumComboBox);

        detailsPanel.add(linkMediumPanel);

        linkURLPanel.setLayout(new javax.swing.BoxLayout(linkURLPanel, javax.swing.BoxLayout.X_AXIS));

        linkURLPanel.setBorder(new javax.swing.border.TitledBorder(null, "Link URL", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10)));
        linkURLPanel.setAlignmentX(0.0F);
        urlTextField.setPreferredSize(new java.awt.Dimension(150, 20));
        urlTextField.setMaximumSize(new java.awt.Dimension(1000, 20));
        urlTextField.setMinimumSize(new java.awt.Dimension(20, 20));
        urlTextField.setEnabled(false);
        urlTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                urlTextFieldActionPerformed(evt);
            }
        });
        urlTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                urlTextFieldFocusLost(evt);
            }
        });

        linkURLPanel.add(urlTextField);

        browseButton.setText("Browse...");
        browseButton.setEnabled(false);
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        linkURLPanel.add(browseButton);

        detailsPanel.add(linkURLPanel);

        add(detailsPanel, java.awt.BorderLayout.SOUTH);

    }
    // </editor-fold>//GEN-END:initComponents

  private void urlTextFieldFocusLost (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_urlTextFieldFocusLost
// Add your handling code here:
    event.setURL(urlTextField.getText());
    urlTextField.selectAll();    
    setImage();
  }//GEN-LAST:event_urlTextFieldFocusLost

  private void browseButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
// Add your handling code here:

    javax.swing.JFileChooser chooser = new javax.swing.JFileChooser();
    chooser.addChoosableFileFilter(new org.exmaralda.partitureditor.jexmaraldaswing.fileFilters.VideoFileFilter());
    chooser.addChoosableFileFilter(new org.exmaralda.partitureditor.jexmaraldaswing.fileFilters.LinkableTextFileFilter());
    chooser.addChoosableFileFilter(new org.exmaralda.partitureditor.jexmaraldaswing.fileFilters.ImageFileFilter());
    chooser.addChoosableFileFilter(new org.exmaralda.partitureditor.jexmaraldaswing.fileFilters.AudioFileFilter());
    chooser.addChoosableFileFilter(new org.exmaralda.partitureditor.jexmaraldaswing.fileFilters.LinkableFileFilter());
    
    chooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
    try {
        chooser.setCurrentDirectory(new File(directory));
    }
    catch (Throwable dummy){}  
    int returnval = chooser.showOpenDialog(this);
    if(returnval == javax.swing.JFileChooser.APPROVE_OPTION) {
        String filename = chooser.getSelectedFile().getPath();
        urlTextField.setText(filename);
        event.setURL(filename);
        setDirectory(filename);
        setImage();
    }
    
  }//GEN-LAST:event_browseButtonActionPerformed

  private void mediumComboBoxActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediumComboBoxActionPerformed
// Add your handling code here:
    switch (mediumComboBox.getSelectedIndex()){
        case 0 : event.setMedium("none");
                 event.setURL("");
                 urlTextField.setText("");
                 urlTextField.setEnabled(false);
                 browseButton.setEnabled(false);
                 break;
        case 1 : event.setMedium("aud");
                 urlTextField.setEnabled(true);
                 browseButton.setEnabled(true);
                 break;
        case 2 : event.setMedium("vid");
                 urlTextField.setEnabled(true);
                 browseButton.setEnabled(true);
                 break;
        case 3 : event.setMedium("img");
                 urlTextField.setEnabled(true);
                 browseButton.setEnabled(true);
                 break;
        case 4 : event.setMedium("txt");
                 urlTextField.setEnabled(true);
                 browseButton.setEnabled(true);
                 break;
        case 5 : event.setMedium("oth");
                 urlTextField.setEnabled(true);
                 browseButton.setEnabled(true);
                 break;
    }
    fireLinkChanged();
  }//GEN-LAST:event_mediumComboBoxActionPerformed

  private void urlTextFieldActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_urlTextFieldActionPerformed
// Add your handling code here:
    event.setURL(urlTextField.getText());
    urlTextField.selectAll();
    setImage();    
  }//GEN-LAST:event_urlTextFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel descriptionTextLabel;
    private javax.swing.JPanel detailsPanel;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JPanel displayPanel2;
    private javax.swing.JPanel eventDescriptionPanel;
    private javax.swing.JPanel linkMediumPanel;
    private javax.swing.JPanel linkURLPanel;
    private javax.swing.JPanel mediaControlPanel;
    private javax.swing.JComboBox mediumComboBox;
    private javax.swing.JTextField urlTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void dataChanged(final com.klg.jclass.table.JCTableDataEvent p1) {
    }
    
    public void addLinkPanelListener(LinkPanelListener l) {
         eventListenerList.add(LinkPanelListener.class, l);
    }
    
    public void removeAllListeners(){
        eventListenerList = new javax.swing.event.EventListenerList();
    }
    
    protected void fireLinkChanged() {
         // Guaranteed to return a non-null array
        Object[] listeners = eventListenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
             if (listeners[i]==LinkPanelListener.class) {
                ((LinkPanelListener)listeners[i+1]).linkChanged(row,col);             
            }
         }
    }
    public void emptyContents(){
        descriptionTextLabel.setText("");
        urlTextField.setText("");
        urlTextField.setEnabled(false);
        mediumComboBox.setEnabled(false);
    }
    
    private void setImage(){
        if (!mediumComboBox.getSelectedItem().equals("Image")) {return;}
        String url = urlTextField.getText();
        ImageIcon image = new ImageIcon(url);
        //int width = imageScrollPane.getWidth();
        //image.setImage(image.getImage().getScaledInstance(width, -1, sun.awt.image.Image.SCALE_DEFAULT));        
        displayPanel2.removeAll();
        mediaControlPanel.removeAll();
        if (image.getIconWidth()>0){
            scrollablePicture = new ScrollablePicture(image, 20);            
            // scrollablePicture.setIcon(image);              
            displayPanel2.add(scrollablePicture);
            java.awt.Dimension size = new java.awt.Dimension(image.getIconWidth(), image.getIconHeight());
            System.out.println(image.getIconWidth() + " / " + image.getIconHeight());
            displayPanel.setVisible(true);
            displayPanel2.setPreferredSize(size);            
            displayPanel2.setPreferredSize(size);
            displayPanel2.setMaximumSize(size);
        } else {
            errorLabel = new JLabel("Unable to load image");
            errorLabel.setForeground(java.awt.Color.RED);
            displayPanel2.add(errorLabel);
            displayPanel2.setPreferredSize(new java.awt.Dimension(200,20));
            displayPanel.setVisible(true);            
        }
        packLinkPanel();
    }
    
    private void setAudioVideo(){
        player = new org.exmaralda.partitureditor.sound.JavaFXPlayer();
        String url = urlTextField.getText();
        displayPanel2.removeAll();
        mediaControlPanel.removeAll();
        try{
            player.setSoundFile(url);
            java.awt.Component viscomp = player.getVisibleComponent();
            if (viscomp!=null){
                displayPanel2.add(viscomp);
                displayPanel2.setPreferredSize(viscomp.getPreferredSize());
            } else {
                displayPanel2.setPreferredSize(new java.awt.Dimension(0,0));
            }
            /*java.awt.Component comp = player.getPlayerControlComponent();
            if (comp!=null){                                
                mediaControlPanel.add(comp);
            } else {
                
            }*/
            displayPanel.setVisible(true);
        } catch (IOException ioe){
            System.out.println(ioe.getMessage());
            errorLabel = new JLabel(ioe.getMessage());
            errorLabel.setForeground(java.awt.Color.RED);
            displayPanel2.add(errorLabel);
            displayPanel2.setPreferredSize(new java.awt.Dimension(200,20));
            displayPanel.setVisible(true);
        }
        packLinkPanel();
    }
    
    private void setText(){
        displayPanel2.removeAll();
        mediaControlPanel.removeAll();
        textdisplay = new java.awt.TextArea();

        try{
            String url = urlTextField.getText();
            FileReader fr = new FileReader(url);
            BufferedReader br = new BufferedReader(fr);
            String nextLine;
            StringBuilder sb = new StringBuilder();
            int lineCount = 0;
            while ((nextLine = br.readLine()) != null){
                sb.append(nextLine + System.getProperty("line.separator"));
                lineCount++;
            }
            br.close();
            textdisplay.setText(sb.toString());  
            textdisplay.setSize(new java.awt.Dimension(200, Math.min(200,40 + lineCount*12)));
            displayPanel2.add(textdisplay);
            displayPanel2.setPreferredSize(new java.awt.Dimension(200, Math.min(200,40 + lineCount*12)));
        } catch (IOException ioe){
            errorLabel = new JLabel(ioe.getMessage());
            errorLabel.setForeground(java.awt.Color.RED);
            displayPanel2.add(errorLabel);
            displayPanel2.setPreferredSize(new java.awt.Dimension(200,20));            
        }
        displayPanel.setVisible(true);
        packLinkPanel();
        
    }
    
    private void packLinkPanel(){
        if ((isVisible()) && (getTopLevelAncestor()!=null) && (getTopLevelAncestor() instanceof javax.swing.JDialog)) {
            ((javax.swing.JDialog)(getTopLevelAncestor())).pack();
        }        
    }
    
    
    
}