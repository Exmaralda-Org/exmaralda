/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.exmaralda.partitureditor.svgPanel;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.border.EtchedBorder;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.apache.batik.bridge.UpdateManager;
import org.apache.batik.gvt.GraphicsNode;
import org.apache.batik.swing.JSVGCanvas;
import org.apache.batik.swing.JSVGScrollPane;
import org.apache.batik.swing.gvt.GVTTreeRendererAdapter;
import org.apache.batik.swing.gvt.GVTTreeRendererEvent;
import org.apache.batik.swing.svg.GVTTreeBuilderAdapter;
import org.apache.batik.swing.svg.GVTTreeBuilderEvent;
import org.apache.batik.swing.svg.SVGDocumentLoaderAdapter;
import org.apache.batik.swing.svg.SVGDocumentLoaderEvent;
import org.apache.batik.util.SVGConstants;
import org.exmaralda.partitureditor.jexmaraldaswing.fileFilters.ParameterFileFilter;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.events.EventTarget;
import org.w3c.dom.svg.SVGDocument; 
import org.w3c.dom.svg.SVGElement;
import org.w3c.dom.svg.SVGLocatable;

/**
 *
 * @author Julia Damerow
 */
public class DisplaySVGPanel extends javax.swing.JPanel implements Observer {

	/**
	 * 
	 */
	private static final long serialVersionUID = 2113076818698940197L;
	
	protected /*final*/ String HIGHLIGHT = "stroke:red;fill:red;fill-opacity:0.25;stroke-width:0.15%";
	protected final int rightPanelWidth = 270;
	protected final int topPanelWidth = 80;
        
        final JPanel mainPanel = new JPanel(new BorderLayout());
        
	
	// The frame (for getting size info)
	protected JFrame frame;

	// The "Load" button, which displays up a file chooser upon clicking.
	protected JButton openButton = new JButton();
        protected JButton zoomInButton = new JButton();
        protected JButton zoomOutButton = new JButton();
        protected JButton colorChooserButton = new JButton();
        protected JButton sendButton = new JButton();

	// The status label that shows what's happening
	protected JLabel statusLabel = new JLabel();
	protected JLabel filenameLabel = new JLabel();
	protected JLabel xpointerIDLabel = new JLabel();

	// The SVG canvas.
	protected JSVGCanvas svgCanvas = new JSVGCanvas();
        JSVGScrollPane scroller;
	protected SVGDocument svgDoc;


	/*private JTextField selectedIdLabel;
	private JTextField enterXpointerText;*/

	//private SVGElement highlighted;
        private final ArrayList<SVGElement> highlighted = new ArrayList<SVGElement>();
	
	// url of currently selected file
	private URL selectedFileUrl;
        
        private final ArrayList<XPointerListener> xPointerListeners = new ArrayList<XPointerListener>();
        private final ArrayList<String> xPointerIDs = new ArrayList<String>();

	public DisplaySVGPanel(JFrame frame) {
            this.frame = frame;
            XPointerObservable._instance.addObserver(this);
            initComponents();
	}
        
        public void addXPointerListener(XPointerListener xpl){
            xPointerListeners.add(xpl);
        }
        
        public void fireXPointer(String xPointer){
            for (XPointerListener xpl : xPointerListeners){
                xpl.processXPointer(xPointer);
            }
        }
        
        
        public void setHighlightColor(String colorString){
            removeHighlight();
            HIGHLIGHT = "stroke:" + colorString + ";fill:" + colorString + ";fill-opacity:0.25;stroke-width:0.15%";
        }

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {
		this.setLayout(new BorderLayout());
		
		this.add(mainPanel);

		scroller = new JSVGScrollPane(svgCanvas);

		// bottom panel with status label
                JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
		bottomPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
                bottomPanel.add(statusLabel);
		
		// top panel (container for two more panels)
		JPanel topPanel = new JPanel();                
                topPanel.setLayout(new BoxLayout(topPanel, BoxLayout.Y_AXIS));
		
                // first top panel with buttons
                JPanel topPanel1 = new JPanel(new FlowLayout(FlowLayout.LEFT));                
                // second top panel with xpointer info
                JPanel topPanel2 = new JPanel(new FlowLayout(FlowLayout.LEFT));                

                openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/32x32/actions/document-open.png"))); 
                openButton.setToolTipText("Open SVG file...");
                openButton.setMaximumSize(new java.awt.Dimension(40, 40));
                openButton.setMinimumSize(new java.awt.Dimension(40, 40));
                openButton.setPreferredSize(new java.awt.Dimension(40, 40));
		topPanel1.add(openButton);
		openButton.addActionListener(new ActionListener() {
                        @Override
			public void actionPerformed(ActionEvent ae) {
                            openButtonActionPerformed(ae);
                        }
		});
                

                zoomInButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/zoom-in-32.png"))); 
                zoomInButton.setToolTipText("Zoom in");
                zoomInButton.setMaximumSize(new java.awt.Dimension(40, 40));
                zoomInButton.setMinimumSize(new java.awt.Dimension(40, 40));
                zoomInButton.setPreferredSize(new java.awt.Dimension(40, 40));
		topPanel1.add(zoomInButton);
		zoomInButton.addActionListener(svgCanvas.getActionMap().get(JSVGCanvas.ZOOM_IN_ACTION));
                zoomInButton.setEnabled(false);
		
                zoomOutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/zoom-out-32.png"))); 
                zoomOutButton.setToolTipText("Zoom out");
                zoomOutButton.setMaximumSize(new java.awt.Dimension(40, 40));
                zoomOutButton.setMinimumSize(new java.awt.Dimension(40, 40));
                zoomOutButton.setPreferredSize(new java.awt.Dimension(40, 40));
		topPanel1.add(zoomOutButton);
		zoomOutButton.addActionListener(svgCanvas.getActionMap().get(JSVGCanvas.ZOOM_OUT_ACTION));
                zoomOutButton.setEnabled(false);

                
                colorChooserButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/ColorChooser.png"))); 
                colorChooserButton.setToolTipText("Choose highlight color");
                colorChooserButton.setMaximumSize(new java.awt.Dimension(40, 40));
                colorChooserButton.setMinimumSize(new java.awt.Dimension(40, 40));
                colorChooserButton.setPreferredSize(new java.awt.Dimension(40, 40));
		topPanel1.add(colorChooserButton);
		colorChooserButton.addActionListener(new ActionListener() {
                        @Override
			public void actionPerformed(ActionEvent ae) {
                            colorChooserButtonActionPerformed(ae);
                        }
		});

                sendButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/folker/tangoicons/tango-icon-theme-0.8.1/32x32/actions/edit-redo.png"))); 
                sendButton.setToolTipText("Send current address");
                sendButton.setMaximumSize(new java.awt.Dimension(40, 40));
                sendButton.setMinimumSize(new java.awt.Dimension(40, 40));
                sendButton.setPreferredSize(new java.awt.Dimension(40, 40));
		topPanel1.add(new JSeparator());
                topPanel1.add(sendButton);
		sendButton.addActionListener(new ActionListener() {
                        @Override
			public void actionPerformed(ActionEvent ae) {
                            sendButtonActionPerformed(ae);
                        }
		});
                sendButton.setEnabled(false);

                
                topPanel2.add(filenameLabel);
                topPanel2.add(new JLabel(" # "));
                topPanel2.add(xpointerIDLabel);

		// add components for showing selected xpointer
		/*JPanel rightPanel = new JPanel();
		rightPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
		rightPanel.setLayout(new BoxLayout(rightPanel, BoxLayout.Y_AXIS));
		JLabel label1 = new JLabel("XPointer for selected Element:", JLabel.LEFT);
		label1.setAlignmentX(Component.LEFT_ALIGNMENT);
		rightPanel.add(label1);

		selectedIdLabel = new JTextField();
		selectedIdLabel.setEditable(false);
		selectedIdLabel.setMaximumSize(new Dimension(400, 40));
		selectedIdLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
		rightPanel.add(selectedIdLabel); */

		topPanel.add(topPanel1);
		topPanel.add(topPanel2);
                mainPanel.add(BorderLayout.PAGE_START, topPanel);
		mainPanel.add(BorderLayout.CENTER, scroller);
		/*panel.add(BorderLayout.LINE_END, rightPanel);*/
		mainPanel.add(BorderLayout.PAGE_END, bottomPanel);
		
		// add components for entering xpointer
		/*JLabel labelEnterXPointer = new JLabel(
				"Enter an XPointer to highlight:", JLabel.LEFT);
		labelEnterXPointer.setAlignmentX(Component.LEFT_ALIGNMENT);
		rightPanel.add(labelEnterXPointer);

		enterXpointerText = new JTextField();
		enterXpointerText.setMaximumSize(new Dimension(400, 40));
		enterXpointerText.setAlignmentX(Component.LEFT_ALIGNMENT);
		rightPanel.add(enterXpointerText);

		JButton hightlightButton = new JButton();
		hightlightButton.setText("Highlight Component");
		hightlightButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				String xpointer = enterXpointerText.getText();
				highlightByXPointer(xpointer);
			}
		});
		rightPanel.add(hightlightButton);

		JButton removeHighlightBtn = new JButton("Remove Highlighting");
		removeHighlightBtn.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				UpdateManager um = svgCanvas.getUpdateManager();
				um.getUpdateRunnableQueue().invokeLater(new Runnable() {

					@Override
					public void run() {
						removeHighlight();
					}
				});
			}
		});
		rightPanel.add(removeHighlightBtn);
                
                rightPanel.setVisible(false);*/


		// Set the JSVGCanvas listeners.
		svgCanvas.addSVGDocumentLoaderListener(new SVGDocumentLoaderAdapter() {
                        @Override
			public void documentLoadingStarted(SVGDocumentLoaderEvent e) {
				System.out.println("Document loading started");
				statusLabel.setText("Document Loading...");
			}

                        @Override
			public void documentLoadingCompleted(SVGDocumentLoaderEvent e) {
				System.out.println("Document loading completed");
                                svgDoc = svgCanvas.getSVGDocument();
				Element docNode = svgDoc.getDocumentElement();
				NodeList pathNodes = docNode.getElementsByTagName("*");

				List<SVGLocatable> pathElements = new ArrayList<SVGLocatable>();
				for (int i = 0; i < pathNodes.getLength(); i++) {

					Node node = pathNodes.item(i);
					org.w3c.dom.events.EventTarget t = (EventTarget) node;

					if ((t instanceof SVGLocatable)) {
						pathElements.add((SVGLocatable) t);
					}

					t.addEventListener(SVGConstants.SVG_EVENT_CLICK,
							new MouseListener(svgCanvas),
							false);
				}

				svgDoc.getRootElement().setAttributeNS(null,
						SVGConstants.SVG_WIDTH_ATTRIBUTE,
						frame.getWidth() - rightPanelWidth + "");
				svgDoc.getRootElement().setAttributeNS(null,
						SVGConstants.SVG_HEIGHT_ATTRIBUTE,
						frame.getHeight() - topPanelWidth + "");
				statusLabel.setText("Document Loaded.");
                                //System.out.println("****" + selectedFileUrl.getFile());
                                filenameLabel.setText(new File(selectedFileUrl.getFile()).getName());
                                filenameLabel.setToolTipText(selectedFileUrl.toString());                                                                                                
                                

			}
		});

		svgCanvas.addGVTTreeBuilderListener(new GVTTreeBuilderAdapter() {
                        @Override
			public void gvtBuildStarted(GVTTreeBuilderEvent e) {
				statusLabel.setText("Build Started...");
			}

                        @Override
			public void gvtBuildCompleted(GVTTreeBuilderEvent e) {
				statusLabel.setText("Build Done.");
				frame.repaint();
			}
		});

		svgCanvas.addGVTTreeRendererListener(new GVTTreeRendererAdapter() {
                        @Override
			public void gvtRenderingPrepare(GVTTreeRendererEvent e) {
				statusLabel.setText("Rendering Started...");
			}

                        @Override
			public void gvtRenderingCompleted(GVTTreeRendererEvent e) {
				statusLabel.setText("Rendering Complete.");
				
				// make SVG fit panel width
				AffineTransform at = new AffineTransform();
				int panelHeight = mainPanel.getHeight() - topPanelWidth;
				int panelWidth = mainPanel.getWidth() - rightPanelWidth;

				GraphicsNode gvtRoot = svgCanvas.getCanvasGraphicsNode();

				Rectangle2D rect = gvtRoot.getSensitiveBounds();

				double ratio = panelWidth / rect.getWidth() > panelHeight
						/ rect.getHeight() ? panelWidth / rect.getWidth()
						: panelHeight / rect.getHeight();
				at.scale(ratio, ratio);
				svgCanvas.setRenderingTransform(at, true);
				svgCanvas.repaint();
                                
                                sendButton.setEnabled(true);
                                zoomInButton.setEnabled(true);
                                zoomOutButton.setEnabled(true);
                                
			}
		});
	}

        public String getCurrentXPointer(){
            try {
                // diagramme/1a_13_prozesserhebung_entfetten_notiz-1-von-pm1.svg#xpointer(id('rect3048'))xpointer(id('rect3062'))
                URI uri1 = getSelectedFileUrl().toURI();
                URI uri2 = baseDirectory.toURI();
                URI relativeURI = uri2.relativize(uri1);
                //String result = getSelectedFileUrl().toString();
                String result = relativeURI.toString();
                result+="#";
                for (String id : xPointerIDs){ 
                    result+="xpointer(" + id + ")";
                }
                return result;
            } catch (URISyntaxException ex) {
                return "";
            }
        }
        
        private void sendButtonActionPerformed(ActionEvent ae) {
            String xPointer = getCurrentXPointer();
            fireXPointer(xPointer);
        }

        private void openButtonActionPerformed(ActionEvent ae) {
                JFileChooser fc = new JFileChooser(".");
                fc.setFileFilter(new ParameterFileFilter("svg", "Scalable Vector Graphics (*.svg)"));
                int choice = fc.showOpenDialog(mainPanel);
                if (choice == JFileChooser.APPROVE_OPTION) {
                        File selectedFile = fc.getSelectedFile();
                        try {
                            setSelectedFileUrl(selectedFile.toURI().toURL());
                        } catch (MalformedURLException e) {
                            // TODO Auto-generated catch block
                            //e.printStackTrace();
                            JOptionPane.showMessageDialog(mainPanel, 
                                    "File " + selectedFile + " could not be opened:\n"
                                            + e.getLocalizedMessage()
                            );
                        }

                }
        }
        
        private void colorChooserButtonActionPerformed(ActionEvent ae) {
            Color newColor = JColorChooser.showDialog(mainPanel,
                                 "Choose Highlight Color",
                                 null);
            String colorString = "rgb(" + Integer.toString(newColor.getRed()) + "," + Integer.toString(newColor.getGreen()) + "," + Integer.toString(newColor.getBlue()) + ")";
            setHighlightColor(colorString);
        }
        
        
	private void highlightElement(SVGElement newHighlight) {
		// remove highlight css but keep any pre-existing styles
		String newElementStyleValue = newHighlight.getAttribute("style");
		if (newElementStyleValue == null) {
			newElementStyleValue = "";
		}
		newElementStyleValue = newElementStyleValue + HIGHLIGHT;
		newHighlight.setAttribute("style", newElementStyleValue);
		svgCanvas.repaint();

		//highlighted = newHighlight;
                highlighted.add(newHighlight);
	}

	private void removeHighlight() {
		//if (highlighted != null) {
                if (!highlighted.isEmpty()) {
                        for (SVGElement hlElement : highlighted){
                            String styleValue = hlElement.getAttribute("style");
                            if (styleValue == null) {
                               styleValue = "";
                            }
                            styleValue = styleValue.replace(HIGHLIGHT, "");
                            hlElement.setAttribute("style", styleValue);
                        }
		}
	}
	
	/**
	 * Method to get currently loaded file.
	 * @return
	 */
	public URL getSelectedFileUrl() {
		return selectedFileUrl;
	}

	/**
	 * Method to set and load an SVG file. This method makes sure SVG document
	 * is set to dynamic and then loads a file.
	 * 
	 * @param selectedFileUrl URL to SVG file
	 */
	public boolean setSelectedFileUrl(URL selectedFileUrl) {
            if (selectedFileUrl.equals(this.selectedFileUrl)){
                // do not load the document again!
                return false;
            }
            this.selectedFileUrl = selectedFileUrl;
            
            final URL fUrl = selectedFileUrl;
            
            // Cannot use  SwingUtilities.invokeAndWait() here because
            // Exception in thread "AWT-EventQueue-0" java.lang.Error: Cannot call invokeAndWait from the event dispatcher thread
            
            svgCanvas.setDocumentState(JSVGCanvas.ALWAYS_DYNAMIC);
            svgCanvas.setURI(fUrl.toString());             
            return true;
	}


	@Override
	public void update(Observable o, Object arg) {
            if (o instanceof XPointerObservable) {
                    String xpointer = arg.toString();
                    //selectedIdLabel.setText(xpointer);
                    //xpointerIDLabel.setText(xpointer);
                    removeAllXPointerIDs();
                    addXPointerID(xpointer);
                    highlightByXPointer(xpointer);
            }
	}

	/**
	 * This method takes the given XPointer and highlights the corresponding
	 * SVG element.
	 * @param xpointer An xpointer identifying the element to highlight.
	 */
	public void highlightByXPointer(String xpointer) {
            highlightByXPointer(xpointer, true);
        }
	
	/**
	 * This method takes the given XPointer and highlights the corresponding
	 * SVG element.
	 * @param xpointer An xpointer identifying the element to highlight.
         * @param removeExistingHighlights whether or not to remove existing highlights
	 */
        public void highlightByXPointer(String xpointer, final boolean removeExistingHighlights) {
            //System.out.println("Trying XPointer " + xpointer);
            if (xpointer != null && !xpointer.trim().isEmpty()) {
                    XPath xpath = XPathFactory.newInstance().newXPath();
                    try {
                            final Object obj = xpath.evaluate(xpointer, svgDoc.getRootElement(),
                                            XPathConstants.NODE);
                            if (obj != null && obj instanceof SVGElement) {
                                    UpdateManager um = svgCanvas.getUpdateManager();
                                    um.getUpdateRunnableQueue().invokeLater(new Runnable() {

                                            @Override
                                            public void run() {
                                                    if (removeExistingHighlights){
                                                        removeHighlight();
                                                    }
                                                    highlightElement((SVGElement) obj);
                                            }
                                    });
                            }
                    } catch (XPathExpressionException e1) {
                            // TODO this should be handled properly
                            //e1.printStackTrace();
                            JOptionPane.showMessageDialog(mainPanel, 
                                    "Element " + xpointer + " could not be highlighted:\n"
                                            + e1.getLocalizedMessage());
                            
                    }
            }
	}
        
        String lastXPointerRef = "";
        

        private void removeAllXPointerIDs(){
            xPointerIDs.removeAll(xPointerIDs);
            xpointerIDLabel.setText("");
        }
        
        private void addXPointerID(String id){
            xPointerIDs.add(id);
            xpointerIDLabel.setText(xpointerIDLabel.getText() + " " + id);
        }
        
        private File baseDirectory;
        
        /* This is what comes from the Partitur-Editor:
            xPointerRef is the content of an event in a tier of category 'ref'
            baseDir is the directory in which the current transcription resides,
            this is needed so that file parts of xpointers can be calculated relative to it
        */
        public void setXPointer(final String xPointerRef, File baseDir){
            if (xPointerRef.equals(lastXPointerRef)) return;
            lastXPointerRef = xPointerRef;

            // diagramme/1a_13_prozesserhebung_entfetten_notiz-1-von-pm1.svg#xpointer(id('rect2993'))
            final int index = xPointerRef.indexOf("#");
            if (index<0){
                String message = "No file component given in " + xPointerRef;
                JOptionPane.showMessageDialog(this, message);
                return;
            }
            
            baseDirectory = baseDir;
            
            // Step 1 : load the document
            String svgPath = xPointerRef.substring(0, index);
            URI baseURI = baseDir.toURI();
            URI absoluteURI = baseURI.resolve(svgPath);
            
            
            try {
                // START NON_THREADED VARIANT
                boolean wasLoaded = setSelectedFileUrl(absoluteURI.toURL());
                // Step 2 : locate the SVG element and highlight it
                Pattern p = Pattern.compile("id\\(\\'[a-zA-Z0-9]+\\'\\)");      
                final Matcher m = p.matcher(xPointerRef);
                if (!wasLoaded){
                    removeHighlight();
                    //xpointerIDLabel.setText("");
                    removeAllXPointerIDs();
                    int i = index;
                    while (m.find(i)){
                        String id = xPointerRef.substring(m.start(), m.end());
                        //xpointerIDLabel.setText(id);
                        //xpointerIDLabel.setText(xpointerIDLabel.getText() + " " + id);
                        addXPointerID(id);
                        highlightByXPointer(id, false);
                        i = m.end();
                    }                      
                } else{
                    GVTTreeRendererAdapter temporaryTreeRendererAdapter = new GVTTreeRendererAdapter(){
                        @Override
                        public void gvtRenderingCompleted(GVTTreeRendererEvent gvttre) {
                            removeHighlight();
                            //xpointerIDLabel.setText("");
                            removeAllXPointerIDs();
                            int i = index;
                            while (m.find(i)){
                                String id = xPointerRef.substring(m.start(), m.end());
                                //xpointerIDLabel.setText(id);
                                //xpointerIDLabel.setText(xpointerIDLabel.getText() + " " + id);
                                addXPointerID(id);
                                highlightByXPointer(id, false);
                                i = m.end();
                            }
                            svgCanvas.removeGVTTreeRendererListener(this);
                        }                        
                    };
                    svgCanvas.addGVTTreeRendererListener(temporaryTreeRendererAdapter);
                }
                
            } catch (MalformedURLException ex) {
                //Logger.getLogger(DisplaySVGPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(mainPanel, 
                        "Problem with XPointer " + xPointerRef + ":\n"
                                + ex.getLocalizedMessage());                
                return;
            }
            
            /////////////////////////////////////////////////////////
            // NOW SHOULD MAKE SURE THAT THE DOCUMENT IS FULLY LOADED
            // The JSVGCanvas is highly asynchronous so when you call setURI, setDocument or setSVGDocument 
            // they return essentially immediately. Behind the scenes, the canvas creates the rendering tree 
            // and does a first rendering after dispatching the document SVGLoad event. 
            // Only after this first rendering does the UpdateManager become available. [http://xmlgraphics.apache.org/batik/faq.html]
            /////////////////////////////////////////////////////////

            // END NON_THREADED VARIANT
            
            // START THREADED VARIANT            
            /*final Runnable doHighlightElements = new Runnable() {
                    @Override
                    public void run() {
                        System.out.println("Started Highlight Thread");
                        // Step 2 : locate the SVG element and highlight it
                        Pattern p = Pattern.compile("id\\(\\'[a-zA-Z0-9]+\\'\\)");      
                        Matcher m = p.matcher(xPointerRef);
                        removeHighlight();
                        xpointerIDLabel.setText("");
                        int i = index;
                        while (m.find(i)){
                            String id = xPointerRef.substring(m.start(), m.end());
                            //xpointerIDLabel.setText(id);
                            xpointerIDLabel.setText(xpointerIDLabel.getText() + " " + id);
                            highlightByXPointer(id, false);
                            i = m.end();
                        }
                    }

            };
            Thread loadThread = new Thread() {
                    @Override
                    public void run() {
                        try {
                            setSelectedFileUrl(absoluteURI.toURL());
                            System.out.println("Finished Load Thread");
                        } catch (MalformedURLException ex) {
                            Logger.getLogger(DisplaySVGPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        SwingUtilities.invokeLater(doHighlightElements);
                    }
            };
            loadThread.start();*/
                
                
            
        }
        
        
        
}
