/*
 * BasicTranscriptionChecker.java
 *
 * Created on 18. April 2008, 09:22
 */

package org.exmaralda.partitureditor.helpers;

import java.io.*;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import org.exmaralda.partitureditor.fsm.FSMException;
import org.exmaralda.partitureditor.jexmaralda.*;
import org.jdom.JDOMException;
import org.xml.sax.SAXException;

/**
 *
 * @author  thomas
 */
public class BasicTranscriptionChecker extends javax.swing.JFrame {
    
    TranscriptionSelectionPanel tsp = new TranscriptionSelectionPanel();
    
    /** Creates new form BasicTranscriptionChecker */
    public BasicTranscriptionChecker() {
        initComponents();
        getContentPane().add(tsp, java.awt.BorderLayout.CENTER);
        pack();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPanel = new javax.swing.JPanel();
        checkSegmentationButton = new javax.swing.JButton();
        checkAnnotationMismatchesButton = new javax.swing.JButton();
        checkTEITransformationButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TRATSCH (TRAnscripTionS-CHecker) Version 10.2");

        checkSegmentationButton.setText("Check Segmentation...");
        checkSegmentationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSegmentationButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(checkSegmentationButton);

        checkAnnotationMismatchesButton.setText("Check Annotation Mismatches...");
        checkAnnotationMismatchesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAnnotationMismatchesButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(checkAnnotationMismatchesButton);

        checkTEITransformationButton.setText("Check TEI Transformation...");
        checkTEITransformationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkTEITransformationButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(checkTEITransformationButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkAnnotationMismatchesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAnnotationMismatchesButtonActionPerformed
        javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
        fc.setDialogTitle("Choose Error File");
        fc.setFileFilter(new org.exmaralda.partitureditor.jexmaraldaswing.fileFilters.ExmaraldaFileFilter());
        int rv = fc.showSaveDialog(this);
        if (rv!=fc.APPROVE_OPTION) return;
        org.exmaralda.common.corpusbuild.CheckAnnotationMismatches cs = new org.exmaralda.common.corpusbuild.CheckAnnotationMismatches();
        setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
        for (File f : tsp.getFiles()){
            try {
                BasicTranscription bt = new BasicTranscription(f.getAbsolutePath());
                cs.processTranscription(bt, f.getAbsolutePath());
            } catch (SAXException ex) {
                ex.printStackTrace();
                displayError(ex);
                return;
            } catch (URISyntaxException ex) {
                ex.printStackTrace();
                displayError(ex);
                return;
            } catch (JexmaraldaException ex) {
                ex.printStackTrace();
                displayError(ex);
                return;
            }
        }
        try {
            setCursor(java.awt.Cursor.getDefaultCursor());
            cs.output(fc.getSelectedFile().getAbsolutePath());
            javax.swing.JOptionPane.showMessageDialog(this, "Error list written to " + fc.getSelectedFile().getAbsolutePath());
        } catch (JDOMException ex) {
            ex.printStackTrace();
            displayError(ex);
            return;            
        } catch (URISyntaxException ex) {
            ex.printStackTrace();
            displayError(ex);
            return;            
        } catch (IOException ex) {
            ex.printStackTrace();
            displayError(ex);
            return;            
        }

    }//GEN-LAST:event_checkAnnotationMismatchesButtonActionPerformed

    private void checkSegmentationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSegmentationButtonActionPerformed
        javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
        fc.setDialogTitle("Choose Error File");
        fc.setFileFilter(new org.exmaralda.partitureditor.jexmaraldaswing.fileFilters.ExmaraldaFileFilter());
        int rv = fc.showSaveDialog(this);
        if (rv!=fc.APPROVE_OPTION) return;
        org.exmaralda.common.corpusbuild.CheckSegmentation cs = new org.exmaralda.common.corpusbuild.CheckSegmentation();
        setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
        for (File f : tsp.getFiles()){
            try {
                BasicTranscription bt = new BasicTranscription(f.getAbsolutePath());
                cs.processTranscription(bt, f.getAbsolutePath());
            } catch (SAXException ex) {
                ex.printStackTrace();
                displayError(ex);
                return;
            } catch (URISyntaxException ex) {
                ex.printStackTrace();
                displayError(ex);
                return;
            } catch (JexmaraldaException ex) {
                ex.printStackTrace();
                displayError(ex);
                return;
            }
        }
        try {
            setCursor(java.awt.Cursor.getDefaultCursor());
            cs.output(fc.getSelectedFile().getAbsolutePath());
            javax.swing.JOptionPane.showMessageDialog(this, "Error list written to " + fc.getSelectedFile().getAbsolutePath());
        } catch (JDOMException ex) {
            ex.printStackTrace();
            displayError(ex);
            return;            
        } catch (URISyntaxException ex) {
            ex.printStackTrace();
            displayError(ex);
            return;            
        } catch (IOException ex) {
            ex.printStackTrace();
            displayError(ex);
            return;            
        }
    }//GEN-LAST:event_checkSegmentationButtonActionPerformed

private void checkTEITransformationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkTEITransformationButtonActionPerformed
        javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
        fc.setDialogTitle("Choose Error File");
        fc.setFileFilter(new org.exmaralda.partitureditor.jexmaraldaswing.fileFilters.ExmaraldaFileFilter());
        int rv = fc.showSaveDialog(this);
        if (rv!=JFileChooser.APPROVE_OPTION) return;
        org.exmaralda.common.corpusbuild.CheckTEITransformation cs = new org.exmaralda.common.corpusbuild.CheckTEITransformation();
        setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
        for (File f : tsp.getFiles()){
            try {
                BasicTranscription bt = new BasicTranscription(f.getAbsolutePath());
                SegmentedTranscription st = new org.exmaralda.partitureditor.jexmaralda.segment
                        .HIATSegmentation().BasicToSegmented(bt);
                org.jdom.Document st_doc = 
                    org.exmaralda.common.jdomutilities.IOUtilities.readDocumentFromString(st.toXML());
                cs.processTranscription(st_doc, f.getAbsolutePath());
            } catch (JDOMException ex) {
                Logger.getLogger(BasicTranscriptionChecker.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
                displayError(ex);
                return;
            } catch (IOException ex) {
                Logger.getLogger(BasicTranscriptionChecker.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
                displayError(ex);
                return;
            } catch (FSMException ex) {
                Logger.getLogger(BasicTranscriptionChecker.class.getName()).log(Level.SEVERE, null, ex);
                 ex.printStackTrace();
                displayError(ex);
                return;
           } catch (SAXException ex) {
                ex.printStackTrace();
                displayError(ex);
                return;
            } catch (URISyntaxException ex) {
                ex.printStackTrace();
                displayError(ex);
                return;
            } catch (JexmaraldaException ex) {
                ex.printStackTrace();
                displayError(ex);
                return;
            }
        }
        try {
            setCursor(java.awt.Cursor.getDefaultCursor());
            cs.output(fc.getSelectedFile().getAbsolutePath());
            javax.swing.JOptionPane.showMessageDialog(this, "Error list written to " + fc.getSelectedFile().getAbsolutePath());
        } catch (JDOMException ex) {
            ex.printStackTrace();
            displayError(ex);
            return;            
        } catch (URISyntaxException ex) {
            ex.printStackTrace();
            displayError(ex);
            return;            
        } catch (IOException ex) {
            ex.printStackTrace();
            displayError(ex);
            return;            
        }

}//GEN-LAST:event_checkTEITransformationButtonActionPerformed
    
    void displayError(Exception e){
        javax.swing.JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        setCursor(java.awt.Cursor.getDefaultCursor());        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BasicTranscriptionChecker().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton checkAnnotationMismatchesButton;
    private javax.swing.JButton checkSegmentationButton;
    private javax.swing.JButton checkTEITransformationButton;
    // End of variables declaration//GEN-END:variables
    
}
